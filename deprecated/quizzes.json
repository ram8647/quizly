{

"quiz_initialize_variable" :{"Name":"quiz_initialize_variable","DisplayName":"Statements: Initialize a Global Variable","Description":"<a href=\"http://www.youtube.com/watch?v=TvTx-6C2Q6U\" target=\"_blank\">How to initialize a global variable</a>","QuestionHTML":"Define (initialize) a global variable named <font color=\"red\"> $#STR1#$</font> and give it an initial value of <font color=\"red\">-91.9</font>. \n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need an <i>initialize</i> block from the <i>Variables</i> drawer.", "You will also need a <i>number</b> block from the <i>Math</i> drawer.", "Pseudocode: Initialize global $#STR1#$ to -91.9"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{"1":"189","STR1":"dotsize"},"FunctionName":"","FunctionDef":"var global_$#STR1#$;\nglobal_$#STR1#$ = -91.9;\n","FunctionInputs":"undefined","XmlDictionary":{"1":"10...200","STR1":["score","total","X","Y","dotsize"]},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"87\" y=\"27\"><field name=\"NAME\">$#STR1#$</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">-91.9</field></block></value></block></xml>"},

"quiz_set_a_global" :{"Name":"quiz_set_a_global","DisplayName":"Statements: Set a global","Description":"Use a setter block to set a global variable.","QuestionHTML":"Add a single statement to the workspace that will set the global variable <i>counter</i> to 0.\n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>setter</i> block from the Variables drawer.","Use the setter block's drop-down to select the variable you want to set.","Put the appropriate value in the setter block's plug. "],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var counter;\nvar total;\nvar global_counter;\n\n\nglobal_counter = 100;\n\nglobal_total = 0;\n\nglobal_counter = 0;\n","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"57\" y=\"7\"><field name=\"NAME\">counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"63\" y=\"47\"><field name=\"NAME\">total</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"57\" y=\"7\"><field name=\"NAME\">counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"63\" y=\"47\"><field name=\"NAME\">total</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">0</field></block></value></block><block type=\"lexical_variable_set\" id=\"84\" inline=\"false\" x=\"64\" y=\"91\"><field name=\"VAR\">global counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"85\"><field name=\"NUM\">0</field></block></value></block></xml>"},

"quiz_set_x_to_y" :{"Name":"quiz_set_x_to_y","DisplayName":"Statements: Set X to Y","Description":"Set X to Y","QuestionHTML":"Add a single statement to the workspace that will set global variable <i>X</i> to <i>Y</i>. ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a setter block in the Variables drawer for <i>X</i>.","You'll need a getter block in the Variables drawer for <i>Y</i>.","Plug the blocks together."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var X;\nvar Y;\nvar global_X;\nvar global_Y;\n\n\nglobal_X = 100;\n\nglobal_Y = 5;\n\nglobal_X = global_Y;\n","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"103\" y=\"6\"><field name=\"NAME\">X</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"336\" y=\"5\"><field name=\"NAME\">Y</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">5</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"103\" y=\"6\"><field name=\"NAME\">X</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"336\" y=\"5\"><field name=\"NAME\">Y</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">5</field></block></value></block><block type=\"lexical_variable_set\" id=\"84\" inline=\"false\" x=\"112\" y=\"61\"><field name=\"VAR\">global X</field><value name=\"VALUE\"><block type=\"lexical_variable_get\" id=\"90\"><field name=\"VAR\">global Y</field></block></value></block></xml>"},

"quiz_statements" :{"Name":"quiz_statements","DisplayName":"Statements: Increment by 1 Statement","Description":"<a href=\"http://www.youtube.com/watch?v=Odw-potCwrM\" target=\"_blank\">How to increment a variable</a>","QuestionHTML":"Write a setter statement that adds 1 to the global variable <i>Z</i>. ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["The <i>setter</i> block is in the <i>Variables</i> drawer.", "You will also need a <i>getter</i> block in the <i>Variables</i> drawer.", "Create an expression block for <i>Z + 1</i> and plug it into the <i>set global Z</i> block.", "Pseudocode: Set Z to Z + 1"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_Z;\n\n\nglobal_Z = 1;\n\nglobal_Z = global_Z + 1;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"53\" y=\"3\"><field name=\"NAME\">Z</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"53\" y=\"3\"><field name=\"NAME\">Z</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block><block type=\"lexical_variable_set\" inline=\"false\" x=\"56\" y=\"48\"><field name=\"VAR\">global Z</field><value name=\"VALUE\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><field name=\"VAR\">global Z</field></block></value><value name=\"NUM1\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block></value></block></xml>"},

"quiz_incrementing" :{"Name":"quiz_incrementing","DisplayName":"Statements: Add a number to a Global","Description":"<a href=\"http://www.youtube.com/watch?v=JDA4WKajIC0&feature=youtube_gdata\" target=\"_blank\">How to add a number to a global variable</a>","QuestionHTML":"Use a setter to increment global <i>Z</i> by -91.9.\n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["The <i>setter</i> block is in the <i>Variables</i> drawer.", "You will also need a <i>getter</i> block in the <i>Variables</i> drawer.", "Create an expression block for <i>Z + -91.9</i> and plug it into the <i>set global Z</i> block.", "Pseudocode: Set Z to Z + -91.9"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{"1":"9"},"FunctionName":"","FunctionDef":"var global_Z;\n\n\nglobal_Z = 10;\n\nglobal_Z = global_Z + -91.9;\n","FunctionInputs":"undefined","XmlDictionary":{"1":"1...20"},"Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"1\" y=\"-1\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">10</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"1\" y=\"-1\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">10</title></block></value></block><block type=\"lexical_variable_set\" inline=\"false\" x=\"252\" y=\"169\"><title name=\"VAR\">global Z</title><value name=\"VALUE\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global Z</title></block></value><value name=\"NUM1\"><block type=\"math_number\"><title name=\"NUM\">-91.9</title></block></value></block></value></block></xml>"},

"quiz_double_variable" :{"Name":"quiz_double_variable","DisplayName":"Statements: Double a Variable","Description":"<a href=\"http://www.youtube.com/watch?v=vGWBVFlnsYA&feature=youtube_gdata\" target=\"_blank\">How to double a global variable</a>.","QuestionHTML":"Construct a block to double the value of $#STR1#$, which has initial value -91.9.","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a setter block in the <i>Variables</i> drawer.","You'll need a math block in the <i>Math</i> drawer.","To double a variable, ether multiply it times 2 or add it to itself and assign the result back to the variable using the setter.", "Pseudocode: Set $#STR1#$ to $#STR1#$ * 2"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer"],"Components":[],"VariableMappings":{"1":"172","STR1":"C"},"FunctionName":"","FunctionDef":"var global_$#STR1#$;\nglobal_$#STR1#$ = -91.9;\nglobal_$#STR1#$ = global_$#STR1#$ * 2;\n","FunctionInputs":"undefined","XmlDictionary":{"1":"100...200","STR1":["A","B","C"]},"Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"36\" y=\"-1\"><field name=\"NAME\">$#STR1#$</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">-91.9</field></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"36\" y=\"-1\"><field name=\"NAME\">$#STR1#$</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">-91.9</field></block></value></block><block type=\"lexical_variable_set\" inline=\"false\" x=\"40\" y=\"49\"><field name=\"VAR\">global $#STR1#$</field><value name=\"VALUE\"><block type=\"math_multiply\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><field name=\"VAR\">global $#STR1#$</field></block></value><value name=\"NUM1\"><block type=\"math_number\"><field name=\"NUM\">2</field></block></value></block></value></block></xml>"},

"quiz_random_number" :{"Name":"quiz_random_number","DisplayName":"Statements: Random Integer","Description":"Uses the random function.","QuestionHTML":"Assign a random number between -91.9 and -92.9 to the global variable $#STR1#$.  ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Use the <font color=\"red\">random_integer_from_to</font> block in the Math drawer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","mutator_container", "math_mutator_item", "math_number","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","lexical_variable_get","lexical_variable_set","global_declaration"],"Components":[],"VariableMappings":{"1":"-10","2":"160","STR1":"B"},"FunctionName":"","FunctionDef":"var global_$#STR1#$;\nfunction math_random_int(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\nglobal_$#STR1#$ = 0;\nglobal_$#STR1#$ = math_random_int(-91.9, -92.9);\n","FunctionInputs":"undefined","XmlDictionary":{"1":"-10...10","2":"100...200","STR1":["A","B","C","X","Y","Z"]},"Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"95\" y=\"-7\"><field name=\"NAME\">$#STR1#$</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"95\" y=\"-7\"><field name=\"NAME\">$#STR1#$</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value></block><block type=\"lexical_variable_set\" inline=\"false\" x=\"94\" y=\"39\"><field name=\"VAR\">global $#STR1#$</field><value name=\"VALUE\"><block type=\"math_random_int\" inline=\"true\"><value name=\"FROM\"><block type=\"math_number\"><field name=\"NUM\">-91.9</field></block></value><value name=\"TO\"><block type=\"math_number\"><field name=\"NUM\">-92.9</field></block></value></block></value></block></xml>"},

"quiz_initialize" :{"Name":"quiz_initialize","DisplayName":"Statements: Assignment Sequence","Description":"Sequence of assignment statements.","QuestionHTML":"Create a sequence of setter statements that sets the values of all global variables to 0.\n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need a <i>setter</i> block for each global variable. These are in the  <i>Variables</i> drawer.", "Each block should just set the global variable's value to 0.", "Pseudocode: Set X to 0\nSet Y to 0"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_X;\nvar global_Y;\n\n\nglobal_X = 10;\n\nglobal_Y = 20;\n\nglobal_X = 0;\nglobal_Y = 0;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"40\" y=\"14\"><field name=\"NAME\">X</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">10</field></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"44\" y=\"54\"><field name=\"NAME\">Y</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">20</field></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"40\" y=\"14\"><field name=\"NAME\">X</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">10</field></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"44\" y=\"54\"><field name=\"NAME\">Y</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">20</field></block></value></block><block type=\"lexical_variable_set\" inline=\"false\" x=\"76\" y=\"109\"><field name=\"VAR\">global X</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value><next><block type=\"lexical_variable_set\" inline=\"false\"><field name=\"VAR\">global Y</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block></next></block></xml>"},

"quiz_background_color" :{"Name":"quiz_background_color","DisplayName":"Statements: Set Button BackgroundColor Property","Description":"Use a setter block to set the button's background color.","QuestionHTML":"Complete the block shown here so that it sets <i>Button1's</i> BackgroundColor to <font color=\"red\">red</font>.\n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Color blocks are in the <i>Colors</i> drawer."],"BuiltIns":["color_black","color_white","color_red","color_pink","color_orange","color_yellow","color_green","color_cyan","color_blue","color_magenta","color_light_gray","color_gray","color_dark_gray","color_make_color","color_split_color","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_Button1BackgroundColor;\nglobal_Button1BackgroundColor = -65536;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"component_set_get\" inline=\"false\" x=\"72\" y=\"27\"><mutation set_or_get=\"set\" component_type=\"Button\" instance_name=\"Button1\" property_name=\"BackgroundColor\" is_generic=\"false\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><field name=\"PROP\">BackgroundColor</field></block></xml>","Xmlsolution":"<xml><block type=\"component_set_get\" inline=\"false\" x=\"56\" y=\"13\"><mutation set_or_get=\"set\" component_type=\"Button\" instance_name=\"Button1\" property_name=\"BackgroundColor\" is_generic=\"false\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><field name=\"PROP\">BackgroundColor</field><value name=\"VALUE\"><block type=\"color_red\"><field name=\"COLOR\">#ff0000</field></block></value></block></xml>"},

"quiz_set_line_width" :{"Name":"quiz_set_line_width","DisplayName":"Statements: Set Canvas LineWidth Property","Description":"Set the value of the Canvas's line width to five times the current dotsize, where dotsize is a global.","QuestionHTML":"Given the global variable, <i>dotsize</i>, set the Canvas’s <i>LineWidth</i> to five times the dotsize.","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You can find the setter for LineWidth in the Canvas drawer.","Use the multiplication operator in the Math drawer.","You'll also need the getter block in the Variables drawer.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Canvas1","Canvas"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_dotSize;\nglobal_dotSize = 2;\nvar global_Canvas1LineWidth;\nglobal_Canvas1LineWidth = global_dotSize * 5;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"124\" y=\"9\"><title name=\"NAME\">dotSize</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"117\" y=\"11\"><title name=\"NAME\">dotSize</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block><block type=\"Canvas1_setproperty\" inline=\"false\" x=\"117\" y=\"66\"><mutation yailtype=\"number\"></mutation><title name=\"COMPONENT_SELECTOR\">Canvas1</title><title name=\"PROP\">LineWidth</title><value name=\"VALUE\"><block type=\"math_multiply\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global dotSize</title></block></value><value name=\"NUM1\"><block type=\"math_number\"><title name=\"NUM\">5</title></block></value></block></value></block></xml>"},

"quiz_text_color" :{"Name":"quiz_text_color","DisplayName":"Statements: Set Button TextColor Property","Description":"Use a setter block to set a button's Text color property.","QuestionHTML":"Use a <i>setter block</i> to set Button1's <font color=\"red\">TextColor</font> property to <font color=\"magenta\">magenta</font>.\n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need to drag Button1's setter block from the <i>Button</i> drawer to the workspace.","You will also need to select the <i>TextColor</i> property from the block's property mutator."],"BuiltIns":["color_black","color_white","color_red","color_pink","color_orange","color_yellow","color_green","color_cyan","color_blue","color_magenta","color_light_gray","color_gray","color_dark_gray","color_make_color","color_split_color","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_Button1TextColor;\nglobal_Button1TextColor = -65281;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml><block type=\"Button1_setproperty\" inline=\"false\" x=\"74\" y=\"39\"><mutation yailtype=\"number\"></mutation><title name=\"COMPONENT_SELECTOR\">Button1</title><title name=\"PROP\">TextColor</title><value name=\"VALUE\"><block type=\"color_magenta\"><title name=\"COLOR\">#ff00ff</title></block></value></block></xml>"},

"quiz_simple_if_statement" :{"Name":"quiz_simple_if_statement","DisplayName":"Statements: Simple if statement","Description":"Simple if statement","QuestionHTML":"And a simple <i>if</i> statement to the workspace that sets <i>counter</i> to 0 if its value equals 50. Assume that <i>counter</i> has been set to a random value between 1 and 100. \n ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need a <i>if</i> block in the <i>Controls</i> drawer. ","The equals block in the <i>Math</i> drawer can be <b>mutated</b> to become a greater-than block. ","You'll need a <i>setter</i> block in the Variables drawer. "],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var counter;\nvar global_counter;\n\n\nglobal_counter = 20;\n\nif (global_counter == 50) {\n global_counter = 0;\n}\n","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"181\" y=\"8\"><field name=\"NAME\">counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">20</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"181\" y=\"8\"><field name=\"NAME\">counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">0</field></block></value></block><block type=\"controls_if\" id=\"112\" inline=\"false\" x=\"175\" y=\"63\"><value name=\"IF0\"><block type=\"math_compare\" id=\"113\" inline=\"true\"><field name=\"OP\">GT</field><value name=\"A\"><block type=\"lexical_variable_get\" id=\"114\"><field name=\"VAR\">global counter</field></block></value><value name=\"B\"><block type=\"math_number\" id=\"115\"><field name=\"NUM\">50</field></block></value></block></value><statement name=\"DO0\"><block type=\"lexical_variable_set\" id=\"116\" inline=\"false\"><field name=\"VAR\">global counter</field><value name=\"VALUE\"><block type=\"math_number\" id=\"117\"><field name=\"NUM\">0</field></block></value></block></statement></block></xml>"},

"quiz_simple_if_else" :{"Name":"quiz_simple_if_else","DisplayName":"Statements: Set Global in If/Else","Description":"<a href=\"http://www.youtube.com/watch?v=VrzzXpJW8co&feature=youtube_gdata\" target=\"_blank\">How to conditionally set a  variable</a>.","QuestionHTML":"Construct an if-else statement that adds 1 to the variable X if variable Y is greater than 0 and otherwise subtracts 1.","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["For the <i>if-slot</i> you'll need a <i>greater-than</i> block from the Math drawer.","For the <i>do-slot</i> you'll need to construct a statement that adds 1 to X.","For the <i>else-slot</i> you'll need to construct a statement that substracts 1 from X."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container", "math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_X;\nvar global_Y;\nglobal_X = 0;\nglobal_Y = 0;\nif (global_Y > global_Y) {\n  global_X = global_X + 1;\n} else {\n  global_X = global_X - 1;\n}","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"200\" y=\"1\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"204\" y=\"39\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"controls_if\" inline=\"false\" x=\"212\" y=\"85\"><mutation else=\"1\"></mutation></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"200\" y=\"1\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"204\" y=\"39\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"controls_if\" inline=\"false\" x=\"202\" y=\"85\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"math_compare\" inline=\"true\"><title name=\"OP\">GT</title><value name=\"A\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global Y</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></value><statement name=\"DO0\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global X</title><value name=\"VALUE\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global X</title></block></value><value name=\"NUM1\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></value></block></statement><statement name=\"ELSE\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global X</title><value name=\"VALUE\"><block type=\"math_subtract\" inline=\"true\"><value name=\"A\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global X</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></value></block></statement></block></xml>"},

"quiz_if_x_greater_than_y" :{"Name":"quiz_if_x_greater_than_y","DisplayName":"Statements: Use If/Else to Set a Label","Description":"Construct a simple if/else statement","QuestionHTML":"Construct an if/else block that expresses the following statement: If the variable X is greater than the variable Y, then the word \"Greater\" should be assigned to Label1. Otherwise \"Lesser\" should be assigned. (Spelling counts.)","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Values such as \"Greater\" are Text objects in the Text drawer.","The greater-than block is in the Math drawer.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","text","text_join","text_join_item", "text_length","text_isEmpty","text_trim","text_changeCase","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Label1","Label"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_X;\nvar global_Y;\nglobal_X = 100;\nglobal_Y = 100;\nvar global_Label1Text;\nglobal_Label1Text=0;\nif (global_X > global_Y) {\n global_Label1Text = 'Greater';\n} else {\n global_Label1Text = 'Lesser';\n}","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"108\" y=\"3\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">100</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"333\" y=\"4\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">100</title></block></value></block></xml>","Xmlsolution":""},

"quiz_eval_arithmetic" :{"Name":"quiz_eval_arithmetic","DisplayName":"Expressions: Evaluate Simple Arithmetic Expression","Description":"Describe the quiz problem.","QuestionHTML":"Evaluate the expression and type your answer into the text box.","AnswerHTML":"","AnswerType":"eval_expr","AnswerVisibility":"visible","ResultHTML":"","Hints":["If the expression is too hard to do in your head, feel free to use a calculator.", "To skip the problem, just hit the 'Submit' button. You'll be given the correct answer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"function xmlGenerator(xml,low, high, op){var ops = ['ADD', 'MINUS', 'MULTIPLY', 'DIVIDE', 'POWER'];var name1=''; var name2=''; var type = '';if (!op){op = ops[Math.floor(Math.random() * ops.length)];if (op == 'ADD'){name1='NUM0'; name2='NUM1'; type = 'math_add';}else if (op == 'MINUS'){name1='A';name2='B';type = 'math_subtract';} else if (op == 'MULTIPLY'){name1='NUM0';name2='NUM1';type = 'math_multiply'; } else if (op == 'DIVIDE') {name1='A';name2='B';type = 'math_division';} else {type = 'math_power';name1='A';name2='B';}}var n1 = Math.floor(Math.random() * 10);var n2 = Math.floor(Math.random() * 10);if (low && high) {n1 = low + Math.floor(Math.random() * (high - low + 1));n2 = low + Math.floor(Math.random() * (high - low + 1));}if (op == 'DIVIDE' && n2 == 0) {n2 = 1;}if (op == 'DIVIDE') {var factor = Math.floor(Math.random() * 5);n1 = n2 * factor;}if (op == 'POWER' && n2 > 3) {n2 = 3;}xml = xml.replace('$type', type);xml = xml.replace('$arg1', n1);xml = xml.replace('$arg2', n2);xml=xml.replace('$name1',name1);xml=xml.replace('$name2',name2);return xml; }","Xmltemplate":"<xml><block type=\"$type\" inline=\"true\" x=\"85\" y=\"100\"><mutation items=\"2\"></mutation><value name=\"$name1\"><block type=\"math_number\"><title name=\"NUM\">$arg1</title></block></value><value name=\"$name2\"><block type=\"math_number\"><title name=\"NUM\">$arg2</title></block></value></block></xml>","Xmlsolution":""},

"quiz_eval_relations" :{"Name":"quiz_eval_relations","DisplayName":"Expressions: Evaluate Simple Relational Expression","Description":"Describe the quiz problem.","QuestionHTML":"Evaluate the expression as <b>true</b> or <b>false</b> and type your answer into the text box.","AnswerHTML":"","AnswerType":"eval_expr","AnswerVisibility":"visible","ResultHTML":"","Hints":["You can skip the problem by hitting the 'Submit' button.  The correct answer will be displayed."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"function xmlGenerator(xml, low, high, op) {var ops = ['EQ', 'NEQ', 'LT', 'LTE', 'GT', 'GTE'];   if (!op) { op = ops[Math.floor(Math.random() * ops.length)]; } var n1 = Math.floor(Math.random() * 10); var n2 = Math.floor(Math.random() * 10); if (low && high) { n1 = low + Math.floor(Math.random() * (high - low + 1)); n2 = low + Math.floor(Math.random() * (high - low + 1)); } xml = xml.replace('$OP', op); xml = xml.replace('$N1', n1); xml = xml.replace('$N2', n2); return xml; }","Xmltemplate":"<xml><block type=\"math_compare\"><title name=\"OP\" >$OP</title><value name=\"A\"><block type=\"math_number\"><title name=\"NUM\">$N1</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">$N2</title></block></value></block></xml>","Xmlsolution":""},

"quiz_simple_relations_fillin" :{"Name":"quiz_simple_relations_fillin","DisplayName":"Expressions: Complete a Relational Expression","Description":"Simple binary relational fill in the block questions.","QuestionHTML":"Complete the expression in any way you wish so that the resulting expression is true.","AnswerHTML":"","AnswerType":"eval_expr_fillin","AnswerVisibility":"hidden","ResultHTML":"","Hints":[""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"function xmlGenerator(xml, low, high, op) {var ops = ['EQ', 'NEQ', 'LT', 'LTE', 'GT', 'GTE']; if (!op) { op = ops[Math.floor(Math.random() * ops.length)]; } var n1 = Math.floor(Math.random() * 10); var n2 = Math.floor(Math.random() * 10); if (low && high) { n1 = low + Math.floor(Math.random() * (high - low + 1)); n2 = low + Math.floor(Math.random() * (high - low + 1)); } xml = xml.replace('$OP', op); xml = xml.replace('$N1', n1); xml = xml.replace('$N2', n2); return xml; }","Xmltemplate":"<xml><block type=\"math_compare\"><title name=\"OP\">$OP</title><value name=\"A\"><block type=\"math_number\"><title name=\"NUM\">$N1</title></block></value></block><block type=\"math_number\" x=\"85\" y=\"55\"><title name=\"NUM\">$N2</title></block></xml>","Xmlsolution":""},

"quiz_stop_player_if_playing" :{"Name":"quiz_stop_player_if_playing","DisplayName":"Control: Stop Player if Playing","Description":"Simple if-else to start and stop the Player","QuestionHTML":"Complete this <i>Button.Click</i> event handler so that it will <b><i>stop</i></b> the Player if it is already playing. Otherwise it will <b><i>start</i></b> the Player.\n ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the appropriate purple blocks from the <i>Player</i> drawer.","Think about what action to \"do\" when the Player is playing.","Think about what action to \"do\" when the Player is <b>not</b> playing."],"BuiltIns":["controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Player1","Player"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"133\" y=\"15\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"controls_if\" inline=\"false\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"component_set_get\"><mutation set_or_get=\"get\" component_type=\"Player\" instance_name=\"Player1\" property_name=\"IsPlaying\" is_generic=\"false\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field><field name=\"PROP\">IsPlaying</field></block></value></block></statement></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"132\" y=\"26\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"controls_if\" inline=\"false\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"component_set_get\"><mutation component_type=\"Player\" set_or_get=\"get\" property_name=\"IsPlaying\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field><field name=\"PROP\">IsPlaying</field></block></value><statement name=\"DO0\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Stop\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement><statement name=\"ELSE\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Start\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement></block></statement></block></xml>"},

"quiz_if_else_stop_start_player" :{"Name":"quiz_if_else_stop_start_player","DisplayName":"Control: If Else Stop Start Player","Description":"Construct an if/else block to start and stop the Player depending on whether it's already playing","QuestionHTML":"Complete the <i>Button1.Click</i> event. It should <b><i>pause</i></b> the Player if it is already playing. Otherwise it should <i><b>start</b></i> the Player.","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need an <i>if</i> block in the <i>Control</i> drawer.","Use the <i>mutator</i> on the <i>if block</i> to add an <i><b>else</b></i> slot.","Use the <i>drop-down widget</i> on the <i>Player1.isLooping</i> block to select the <i>Player1.isPlaying</i> property.","You'll need the appropriate purple blocks from the <i>Player</i> drawer."],"BuiltIns":["controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Player1","Player"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"133\" y=\"15\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><title name=\"COMPONENT_SELECTOR\">Button1</title></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"132\" y=\"26\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"controls_if\" inline=\"false\"><mutation else=\"1\"></mutation><value name=\"IF0\"><block type=\"component_set_get\"><mutation component_type=\"Player\" set_or_get=\"get\" property_name=\"IsPlaying\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field><field name=\"PROP\">IsPlaying</field></block></value><statement name=\"DO0\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Pause\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement><statement name=\"ELSE\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Start\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement></block></statement></block></xml>"},

"quiz_sum_1_to_n" :{"Name":"quiz_sum_1_to_n","DisplayName":"Control: Sum 1 to N","Description":"Compute the sum of 1 to N","QuestionHTML":"Define a procedure named <i><b>sum1ToN(n)</b></i> that calculates the sum of 1 to N and stores the result in <i><b>sum</b</i>. \n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the first procedure definition block in the <i>Procedures</i> drawer. ","Use the <i>for number in range</i> block in the <i>Controls</i> draw as the loop block. ",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[["Button1","Button"],["Sound1","Sound"],["Canvas1","Canvas"],["Player1","Player"],["Label1","Label"]],"VariableMappings":{},"FunctionName":"sum1ToN(n)","FunctionDef":"var sum;\nvar x;\nvar global_sum;\nvar number;\n\nfunction sum1ToN(x) {\n global_sum = 0;\n for (number = 1;\n (1 <= x) ? number <= x : number >= x;\n number += (1 <= x) ? +1 : -1) {\n global_sum = global_sum + x;\n }\n}\n\n\nglobal_sum = 0;\n","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"252\" inline=\"false\" x=\"88\" y=\"23\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"253\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"254\" inline=\"false\" x=\"88\" y=\"23\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"255\"><field name=\"NUM\">0</field></block></value></block><block type=\"procedures_defnoreturn\" id=\"256\" x=\"88\" y=\"68\"><mutation><arg name=\"x\"></arg></mutation><field name=\"NAME\">sum1ToN</field><field name=\"VAR0\">x</field><statement name=\"STACK\"><block type=\"lexical_variable_set\" id=\"257\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"258\"><field name=\"NUM\">0</field></block></value><next><block type=\"controls_forRange\" id=\"259\" inline=\"false\"><field name=\"VAR\">number</field><value name=\"START\"><block type=\"math_number\" id=\"260\"><field name=\"NUM\">1</field></block></value><value name=\"END\"><block type=\"lexical_variable_get\" id=\"261\"><field name=\"VAR\">x</field></block></value><value name=\"STEP\"><block type=\"math_number\" id=\"262\"><field name=\"NUM\">1</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"263\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"264\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"265\"><field name=\"VAR\">global sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"266\"><field name=\"VAR\">x</field></block></value></block></value></block></statement></block></next></block></statement></block></xml>"},

"quiz_count_nonzeros_in_list_procedure" :{"Name":"quiz_count_nonzeros_in_list_procedure","DisplayName":"Control, Loop: Count the number of nonzeros in a list","Description":"Count nonzeros in a list","QuestionHTML":"Define <font color=\"red\">countNonzerosInList()</font> procedure that counts the number of nonzeros in <i>myList</i> and stores the result in <i>count</i>.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a procedure definition block in the Procedures drawer. Use the first one. ","You'll want to use a <i>for each item</i> loop for this problem.","The loop block will visit each item of <i>myList</i> one at a time putting its value in the <i>item</i> variable.", "On each iteration of the loop you'll want to test if the <i>item</i> is not equal to 0.","If the item is not equal to 0, add 1 to the count."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","lists_select_item", "controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange", "global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"countNonzerosInList()","FunctionDef":"var myList;\nvar count;\nvar global_count;\nvar item;\nvar global_myList;\nfunction countNonzerosInList() {\nglobal_count = 0;\n for (var item_index in global_myList) {\n item = global_myList[item_index];\n if (item != 0) global_count = global_count + 1;\n }\n} global_myList=[3,7, 0, 1, 0]; global_count=5;","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"74\" inline=\"false\" collapsed=\"false\" x=\"88\" y=\"17\"><field name=\"NAME\">myList</field><value name=\"VALUE\"><block type=\"lists_create_with\" id=\"94\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"math_number\" id=\"109\"><field name=\"NUM\">3</field></block></value><value name=\"ADD1\"><block type=\"math_number\" id=\"110\"><field name=\"NUM\">7</field></block></value></block></value></block><block type=\"global_declaration\" id=\"119\" inline=\"false\" collapsed=\"false\" x=\"87\" y=\"56\"><field name=\"NAME\">count</field><value name=\"VALUE\"><block type=\"math_number\" id=\"120\"><field name=\"NUM\">100</field></block></value></block></xml>","Xmlsolution":""},

"quiz_sum_a_list_procedure" :{"Name":"quiz_sum_a_list_procedure","DisplayName":"Control, Loop: Sum a list procedure","Description":"Sum a list","QuestionHTML":"Define <font color=\"red\">sumAList()</font> procedure that computes the sum of the values in <i>myList</i> and stores the result in <i>sum</i>.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a procedure definition block in the Procedures drawer. Use the first one. ","You'll want to use a <i>for each item</i> loop for this problem.","The loop block will visit each item of <i>myList</i> one at a time putting its value in the <i>item</i> variable.", "On each iteration of the loop you'll want to add <i>item</i> to the global sum."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"sumAList()","FunctionDef":"var myList;\nvar sum;\nvar global_sum;\nvar item;\nvar global_myList;\nfunction sumAList() {\nglobal_sum = 0;\n for (var item_index in global_myList) {\n item = global_myList[item_index];\n global_sum = global_sum + item;\n }\n} global_myList=[3,7]; global_sum=100;","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"74\" inline=\"false\" collapsed=\"false\" x=\"88\" y=\"17\"><field name=\"NAME\">myList</field><value name=\"VALUE\"><block type=\"lists_create_with\" id=\"94\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"math_number\" id=\"109\"><field name=\"NUM\">3</field></block></value><value name=\"ADD1\"><block type=\"math_number\" id=\"110\"><field name=\"NUM\">7</field></block></value></block></value></block><block type=\"global_declaration\" id=\"119\" inline=\"false\" collapsed=\"false\" x=\"87\" y=\"56\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"120\"><field name=\"NUM\">100</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"74\" inline=\"false\" collapsed=\"true\" x=\"88\" y=\"17\"><field name=\"NAME\">myList</field><value name=\"VALUE\"><block type=\"lists_create_with\" id=\"94\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"math_number\" id=\"109\"><field name=\"NUM\">3</field></block></value><value name=\"ADD1\"><block type=\"math_number\" id=\"110\"><field name=\"NUM\">7</field></block></value></block></value></block><block type=\"global_declaration\" id=\"119\" inline=\"false\" collapsed=\"true\" x=\"87\" y=\"56\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"120\"><field name=\"NUM\">0</field></block></value></block><block type=\"procedures_defnoreturn\" id=\"123\" x=\"81\" y=\"104\"><mutation></mutation><field name=\"NAME\">sumAList</field><statement name=\"STACK\"><block type=\"controls_forEach\" id=\"129\" inline=\"false\"><field name=\"VAR\">item</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"135\"><field name=\"VAR\">global myList</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"141\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"142\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"148\"><field name=\"VAR\">global sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"151\"><field name=\"VAR\">item</field></block></value></block></value></block></statement></block></statement></block></xml>"},

"quiz_sum_a_list_function" :{"Name":"quiz_sum_a_list_function","DisplayName":"Control, Loop: Sum a List Function","Description":"Define a function to sum a list. ","QuestionHTML":"Define a function named <font color=\"red\">sumAList(list)</font> that takes a list parameter and returns (as a result) the sum of the values in the list.\n ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a procedure definition block in the Procedures drawer. Use the second one.","You'll need a <i>for each item</i> loop block in the Controls drawer. ","Use a local variable for this problem to store the sum within the function.", "To use the <i>for each</i> loop within the scope of the local variable, you will need to put it inside a <i>do..result</i> block from the Controls drawer.","The <i>for each item</i> block should loop through each item of list, which is defined as the function's parameter.", "After the loop, put the sum into the <i>result</i> slot."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","lists_select_item", "controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach", "controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"sumAList(list)","FunctionDef":"function sumAList(L) {\n return function(total) {\n return function() {\n for (var item_index in L) {\n item = L[item_index];\n total = total + item;\n }\n return total;\n }();\n }(0);\n}","FunctionInputs":["[1,2,3,4]"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"71\" inline=\"false\" x=\"107\" y=\"30\"><mutation><arg name=\"L\"></arg></mutation><field name=\"NAME\">sumAList</field><field name=\"VAR0\">L</field><value name=\"RETURN\"><block type=\"local_declaration_expression\" id=\"80\" inline=\"false\"><mutation><localname name=\"total\"></localname></mutation><field name=\"VAR0\">total</field><value name=\"DECL0\"><block type=\"math_number\" id=\"84\"><field name=\"NUM\">0</field></block></value><value name=\"RETURN\"><block type=\"controls_do_then_return\" id=\"90\" inline=\"false\"><statement name=\"STM\"><block type=\"controls_forEach\" id=\"96\" inline=\"false\"><field name=\"VAR\">item</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"99\"><field name=\"VAR\">L</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"105\" inline=\"false\"><field name=\"VAR\">total</field><value name=\"VALUE\"><block type=\"math_add\" id=\"106\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"109\"><field name=\"VAR\">total</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"112\"><field name=\"VAR\">item</field></block></value></block></value></block></statement></block></statement><value name=\"VALUE\"><block type=\"lexical_variable_get\" id=\"115\"><field name=\"VAR\">total</field></block></value></block></value></block></value></block></xml>"},

"quiz_loop_sum_numbers" :{"Name":"quiz_loop:_sum_numbers","DisplayName":"Control: Loop to sum 1 to 10","Description":"Loop: Sum 1 to 10","QuestionHTML":"Create a loop <em>for number from 1 to 10</em> that adds each number to the global variable sum.\n","AnswerHTML":"","AnswerType":"eval_stmt","ResultHTML":"","Hints":["You will need a <em>for each number from 1 to 10 by 1</em> loop.","You will need a <em>set global variable sum</em> block.","You will need a + block to add number and sum and save it in the set sum block.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"FunctionName":"","FunctionDef":"var global_sum = 0; \nfor(number = 1; number <= 10; number++) { \n \t global_sum = global_sum + number;  \n}","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block><block type=\"controls_forRange\" id=\"104\" inline=\"false\" x=\"56\" y=\"83\"><field name=\"VAR\">number</field><value name=\"START\"><block type=\"math_number\" id=\"105\"><field name=\"NUM\">1</field></block></value><value name=\"END\"><block type=\"math_number\" id=\"106\"><field name=\"NUM\">10</field></block></value><value name=\"STEP\"><block type=\"math_number\" id=\"113\"><field name=\"NUM\">1</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"119\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"134\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"139\"><field name=\"VAR\">global sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"142\"><field name=\"VAR\">number</field></block></value></block></value></block></statement></block></xml>"},

"quiz_loop_sum_even_numbers" :{"Name":"quiz_loop_sum_even_numbers","DisplayName":"Control: Loop to add the even numbers from 1 to 20","Description":"Loop: Sum the even numbers 1 to 20","QuestionHTML":"Create a loop <em>for number from 1 to 20</em> that tests the number to see if it is even (using modulo 2) and if it is, adds that number to the global variable sum.\n","AnswerHTML":"","AnswerType":"eval_stmt","ResultHTML":"","Hints":["You will need a <em>for each number from 1 to 20 by 1</em> loop.", "You will need an <em>if block</em> and a <em>modulo</em> block from the Math drawer to see if the remainder is 0 when you divide the number by 2.", "Inside the if block, you will need a <em>set global variable sum</em> block and a + block to add number and sum and save it in the set sum block.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"FunctionName":"","FunctionDef":"var global_sum = 0; \nfor(number = 1; number <= 20; number++) { \n \t if (number % 2 == 0)  \n \t \t global_sum = global_sum + number;  \n  \n}","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block><block type=\"controls_forRange\" id=\"104\" inline=\"false\" x=\"56\" y=\"83\"><field name=\"VAR\">number</field><value name=\"START\"><block type=\"math_number\" id=\"105\"><field name=\"NUM\">1</field></block></value><value name=\"END\"><block type=\"math_number\" id=\"106\"><field name=\"NUM\">10</field></block></value><value name=\"STEP\"><block type=\"math_number\" id=\"113\"><field name=\"NUM\">1</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"119\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"134\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"139\"><field name=\"VAR\">global sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"142\"><field name=\"VAR\">number</field></block></value></block></value></block></statement></block></xml>"},

"quiz_loop_stars" :{"Name":"quiz_loop_stars","DisplayName":"Control: Loop to make 50 stars","Description":"Control: Loop to make 50 stars","QuestionHTML":"Create a <em>for each number</em> loop that creates 50 *'s by joining a * to the star variable each time through the loop. ","AnswerHTML":"","AnswerType":"eval_stmt","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need a <em>for each number</em> from 1 to 50 loop block.","You will need to set the stars variable to a join block that joins a * in a text block to the current value in stars."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","text","text_join","text_join_item","text_length","text_isEmpty","text_trim","text_changeCase","text_compare","text_starts_at","text_contains","text_split","text_split_at_spaces","text_segment","text_replace_all","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"","FunctionDef":"var global_stars = ''; \nfor(number = 1; number <= 50; number++) { \n \t global_stars = global_stars + '*';   \n}","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"209\" inline=\"false\" x=\"47\" y=\"13\"><field name=\"NAME\">stars</field><value name=\"VALUE\"><block type=\"text\" id=\"223\"><field name=\"TEXT\"></field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"365\" inline=\"false\" x=\"70\" y=\"-7\"><field name=\"NAME\">stars</field><value name=\"VALUE\"><block type=\"text\" id=\"366\"><field name=\"TEXT\"></field></block></value></block><block type=\"controls_forRange\" id=\"367\" inline=\"false\" x=\"74\" y=\"57\"><field name=\"VAR\">number</field><value name=\"START\"><block type=\"math_number\" id=\"368\"><field name=\"NUM\">1</field></block></value><value name=\"END\"><block type=\"math_number\" id=\"369\"><field name=\"NUM\">50</field></block></value><value name=\"STEP\"><block type=\"math_number\" id=\"370\"><field name=\"NUM\">1</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"371\" inline=\"false\"><field name=\"VAR\">global stars</field><value name=\"VALUE\"><block type=\"text_join\" id=\"372\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"lexical_variable_get\" id=\"373\"><field name=\"VAR\">global stars</field></block></value><value name=\"ADD1\"><block type=\"text\" id=\"374\"><field name=\"TEXT\">*</field></block></value></block></value></block></statement></block></xml>"},

"quiz_loop_2_to_10th_power" :{"Name":"quiz_loop:_2_to_10th_power","DisplayName":"Control: Loop to calculate 2 to the power of 10.","Description":"Loop: Calculate 2^10 ","QuestionHTML":"Create a loop <em>for number from 1 to 10</em> that multiplies the powerOf2 variable by 2 every time through the loop.\n","AnswerHTML":"","AnswerType":"eval_stmt","ResultHTML":"","Hints":["You will need a <em>for each number from 1 to 10 by 1</em> loop.","You will need a <em>set global variable powerOf2</em> block.","You will need a * block to multiply powerOf2 by 2 and   save it with the set powerOf2 block.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"FunctionName":"","FunctionDef":"var global_powerOf2 = 1; \nfor(number = 1; number <= 10; number++) { \n \t global_powerOf2 = global_powerOf2 * 2;  \n}","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">powerOf2</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">1</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"82\" inline=\"false\" x=\"53\" y=\"19\"><field name=\"NAME\">sum</field><value name=\"VALUE\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block><block type=\"controls_forRange\" id=\"104\" inline=\"false\" x=\"56\" y=\"83\"><field name=\"VAR\">number</field><value name=\"START\"><block type=\"math_number\" id=\"105\"><field name=\"NUM\">1</field></block></value><value name=\"END\"><block type=\"math_number\" id=\"106\"><field name=\"NUM\">10</field></block></value><value name=\"STEP\"><block type=\"math_number\" id=\"113\"><field name=\"NUM\">1</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"119\" inline=\"false\"><field name=\"VAR\">global sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"134\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"139\"><field name=\"VAR\">global sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"142\"><field name=\"VAR\">number</field></block></value></block></value></block></statement></block></xml>"},

"quiz_increment_z" :{"Name":"quiz_increment_z","DisplayName":"Procedures: Increment Z","Description":"<a href=\"http://www.youtube.com/watch?v=xWp0JxmD314?rel=0\" target=\"_blank\">How to define a procedure</a>","QuestionHTML":"Define a procedure named <font color=\"red\">incrementZ</font> that adds 1 to the global variable <font color=\"red\">Z</font>.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a procedure definition block from the Procedures drawer. Use the first one. ","You'll need to rename the procedure to <i>incrementZ</i>.","You'll need both a setter and getter block from the Variables drawer. ","You need to do some math. Use the + block from the Math drawer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"incrementZ()","FunctionDef":"var global_Z;\n\nfunction incrementZ() {\n global_Z = global_Z + 1;\n}","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"73\" inline=\"false\" x=\"119\" y=\"3\"><field name=\"NAME\">Z</field><value name=\"VALUE\"><block type=\"math_number\" id=\"88\"><field name=\"NUM\">10</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"73\" inline=\"false\" x=\"119\" y=\"3\"><field name=\"NAME\">Z</field><value name=\"VALUE\"><block type=\"math_number\" id=\"88\"><field name=\"NUM\">10</field></block></value></block><block type=\"procedures_defnoreturn\" id=\"91\" x=\"119\" y=\"46\"><mutation></mutation><field name=\"NAME\">incrementZ</field><statement name=\"STACK\"><block type=\"lexical_variable_set\" id=\"111\" inline=\"false\"><field name=\"VAR\">global Z</field><value name=\"VALUE\"><block type=\"math_add\" id=\"126\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"132\"><field name=\"VAR\">global Z</field></block></value><value name=\"NUM1\"><block type=\"math_number\" id=\"133\"><field name=\"NUM\">1</field></block></value></block></value></block></statement></block></xml>"},

"quiz_concat" :{"Name":"quiz_concat","DisplayName":"Procedures: Concatenate String Parameters","Description":"Procedure to concat a string.","QuestionHTML":"Write a procedure named <i>concat</i> that takes a string parameter,  concatenates the parameter to itself and assigns the result to the global variable Z. For example, if you call <i>concat(\"Hello\")</i>, it should set Z to \"HelloHello\".\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure</i> block in the Procedures drawer. It's the first block.","You'll want to change the procedure's name and give it a parameter.", "You'll need a <i>setter</i> block from the Variables drawer.", "You'll need to use the <i>join</i> block in the <i>Text</i> drawer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","text","text_join","text_join_item","text_length","text_isEmpty","text_trim","text_changeCase","text_segment", "text_starts_at", "text_contains", "global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"concat(str)","FunctionDef":"var x;\nvar global_Z;\n\nfunction concat(x) {\n global_Z = String(x) + String(x);\n}\n\n\nglobal_Z = 'hi';\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"28\" y=\"2\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"text\"><title name=\"TEXT\">hi</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"28\" y=\"2\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"text\"><title name=\"TEXT\">hi</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"35\" y=\"47\"><mutation><arg name=\"x\"></arg></mutation><title name=\"NAME\">concat</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global Z</title><value name=\"VALUE\"><block type=\"text_join\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">x</title></block></value><value name=\"ADD1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">x</title></block></value></block></value></block></statement></block></xml>"},

"quiz_proc_two_params" :{"Name":"quiz_proc_two_params","DisplayName":"Procedures: Multiply Numeric Parameters","Description":"Define a procedure with two parameters.","QuestionHTML":"Define a procedure named <i>procTwoParams</i> that multiplies its two parameters and assigns the result to the global variable Z. ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":[""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"procTwoParams(num,num)","FunctionDef":"var x;\nvar y;\nvar global_Z;\n\nfunction procTwoParams(x, y) {\n global_Z = x * y;\n}\n\n\nglobal_Z = 1;\n","FunctionInputs":[],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"28\" y=\"14\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"28\" y=\"14\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"274\" y=\"22\"><mutation><arg name=\"x\"></arg><arg name=\"y\"></arg></mutation><title name=\"NAME\">procTwoParams</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global Z</title><value name=\"VALUE\"><block type=\"math_multiply\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">x</title></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">y</title></block></value></block></value></block></statement></block></xml>"},

"quiz_procedure_with_parameter" :{"Name":"quiz_procedure_with_parameter","DisplayName":"Procedures: Define increment() to Increment a Global by Parameter","Description":"<a href=\"https://youtu.be/NCh6BuiQrhE\" target=\"_blank\">How to define a procedure with a parameter</a>","QuestionHTML":"Define a procedure called <font color=\"red\">increment(X)</font> that adds X to the global variable Z. In other words, if Z equals 5 before you call this procedure and you call <i>increment(10)</i>, then 10 will be added to Z making its value 15 after the procedure finishes.","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Use the <i>to-procedure</i> block in the Procedures drawer and name it <i>increment</i>.", "Use the mutator to add a parameter to the procedure definition.",  "In the do slot, you will need to construct a statement that adds the parameter x's value to the variable Z."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"increment(num)","FunctionDef":"var x;\nvar global_Z;\n\nfunction increment(x) {\n global_Z = global_Z + x;\n}\n\n\nglobal_Z = 1;\n","FunctionInputs":[],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"89\" y=\"-1\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"89\" y=\"-1\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"95\" y=\"42\"><mutation><arg name=\"x\"></arg></mutation><title name=\"NAME\">increment</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global Z</title><value name=\"VALUE\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global Z</title></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">x</title></block></value></block></value></block></statement></block></xml>"},

"quiz_proc_call_sum" :{"Name":"quiz_proc_call_sum","DisplayName":"Procedures: Define a Procedure that Calls a Procedure","Description":"Define a procedure that calls a function","QuestionHTML":"Given the function <i>sum</i> and global variables X, Y, and Z, define a procedure named <i>add</i> that calls sum to compute the sum of X and Y and assigns the result to Z. ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":[""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"add()","FunctionDef":"var a;\nvar b;\nvar global_Z;\nvar global_X;\nvar global_Y;\n\nfunction sum(a, b) {\n return a + b;\n}\n\nfunction add() {\n global_Z = sum(global_X, global_Y);\n}\n\n\nglobal_X = 1;\n\nglobal_Y = 1;\n\nglobal_Z = 0;\n","FunctionInputs":[],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"procedures_defreturn\" inline=\"false\" x=\"292\" y=\"-8\"><mutation><arg name=\"a\"></arg><arg name=\"b\"></arg></mutation><field name=\"NAME\">sum</field><value name=\"RETURN\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><field name=\"VAR\">a</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><field name=\"VAR\">b</field></block></value></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"1\" y=\"-1\"><field name=\"NAME\">X</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"16\" y=\"29\"><field name=\"NAME\">Y</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">1</field></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"31\" y=\"59\"><field name=\"NAME\">Z</field><value name=\"VALUE\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value></block></xml>","Xmlsolution":""},

"quiz_add_globals" :{"Name":"quiz_add_globals","DisplayName":"Procedures: Define add() To Compute the Sum of Two Globals","Description":"Procedure to add two globals","QuestionHTML":"Given the global variables <i>X</i>, <i>Y</i>, and <i>Z</i>, define a procedure named <b><i>add</i></b> that calculates the sum of X and Y and stores the result in Z.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure</i> block in the Procedures drawer. It's the first block.","You'll want to change the procedure's name to 'add'.", "You'll need both <i>setter</i> and <i>getter</i> blocks from the Variables drawer.","You'll need the addition operator from the Math drawer.","In pseudocode Set Z to X + Y. Or Z = X + Y."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"add()","FunctionDef":"var global_Z;\nvar global_X;\nvar global_Y;\n\nfunction add() {\n global_Z = global_X + global_Y;\n}\n\n\nglobal_X = 1;\n\nglobal_Y = 1;\n\nglobal_Z = 1;\n","FunctionInputs":[],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"99\" y=\"0\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"97\" y=\"36\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"98\" y=\"72\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"99\" y=\"0\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"319\" y=\"0\"><mutation></mutation><title name=\"NAME\">add</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global Z</title><value name=\"VALUE\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global X</title></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global Y</title></block></value></block></value></block></statement></block><block type=\"global_declaration\" inline=\"false\" x=\"97\" y=\"36\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"98\" y=\"72\"><title name=\"NAME\">Z</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>"},

"quiz_proc_double" :{"Name":"quiz_proc_double","DisplayName":"Procedures: Define double() to double a Global Variable","Description":"A procedure that doubles a global.","QuestionHTML":"Define a procedure named <i>double</i> that doubles the global variable X.","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You will need a <i>to-procedure-return</i> block in the Procedures drawer.", "Place an expression that doubles the value of the parameter into the <i>return</i> slot."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"double()","FunctionDef":"var global_X;\n\nfunction double() {\n global_X = global_X * 2;\n}\n\n\nglobal_X = 1;\n","FunctionInputs":[],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"121\" y=\"9\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"121\" y=\"9\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"119\" y=\"59\"><mutation></mutation><title name=\"NAME\">proc</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global X</title><value name=\"VALUE\"><block type=\"math_multiply\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global X</title></block></value><value name=\"NUM1\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block></value></block></statement></block></xml>"},

"quiz_procedure_bug" :{"Name":"quiz_procedure_bug","DisplayName":"Procedures: Fix a Bug in updateScore() Procedure","Description":"Fix the bug in the procedure.","QuestionHTML":"The <i>updateScore</i> procedure contains a <font color=\"red\">bug</font>. It's supposed to calculate the hit rate and then display the hit rate in <i>Label1</i>. Find and fix the bug.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Think about the order of the statements."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Label1","Label"]],"VariableMappings":{},"FunctionName":"updateScore()","FunctionDef":"var global_hitRate;\nvar global_hits;\nvar global_misses;\nvar global_Label1Text;\nglobal_Label1Text='';\nfunction calculateHitRate() {\n  global_hitRate = global_hits / (global_hits + global_misses);\n}\nfunction updateScore() {\n  calculateHitRate();\n  global_Label1Text = global_hitRate;\n}\nglobal_hitRate = 0;\nglobal_hits = 0;\nglobal_misses = 0;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"40\" y=\"-3\"><title name=\"NAME\">hitRate</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"39\" y=\"33\"><title name=\"NAME\">hits</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"39\" y=\"68\"><title name=\"NAME\">misses</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"40\" y=\"105\"><mutation></mutation><title name=\"NAME\">calculateHitRate</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global hitRate</title><value name=\"VALUE\"><block type=\"math_division\" inline=\"true\"><value name=\"A\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global hits</title></block></value><value name=\"B\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global hits</title></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global misses</title></block></value></block></value></block></value></block></statement></block><block type=\"procedures_defnoreturn\" x=\"42\" y=\"201\"><mutation></mutation><title name=\"NAME\">updateScore</title><statement name=\"STACK\"><block type=\"component_set_get\"><mutation component_type=\"Label\" set_or_get=\"set\" property_name=\"Text\" is_generic=\"false\" instance_name=\"Label1\"></mutation><title name=\"COMPONENT_SELECTOR\">Label1</title><title name=\"PROP\">Text</title><value name=\"VALUE\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global hitRate</title></block></value><next><block type=\"procedures_callnoreturn\"><mutation name=\"calculateHitRate\"></mutation><title name=\"PROCNAME\">calculateHitRate</title></block></next></block></statement></block></xml>","Xmlsolution":""},

"quiz_calculate_hit_rate" :{"Name":"quiz_calculate_hit_rate","DisplayName":"Procedures: Define Procedure to Calculate Hit Rate","Description":"Calculates hitrate = hits / (hits + misses)","QuestionHTML":"Using the pre-defined global variables, define a procedure named <font color=\"red\">calculateHitRate</font> that calculates the player's <i>hit percentage</i>, which is defined as: hitRate = hits / (hits + misses). \n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>procedure do</i> block in the Procedures drawer.", "Your procedure should <i>set the value</i> of the global <i>hitRate</i> variable.", "Build your math expression using blocks in the Math drawer"],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"calculateHitRate()","FunctionDef":"var global_hitRate;\nvar global_hits;\nvar global_misses;\nglobal_hits = 0;\nglobal_misses = 0;\nglobal_hitRate = 0;\n\nfunction calculateHitRate() {\n  global_hitRate = global_hits / (global_hits + global_misses);\n}\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"63\" y=\"-9\"><title name=\"NAME\">hits</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"61\" y=\"29\"><title name=\"NAME\">misses</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"65\" y=\"76\"><title name=\"NAME\">hitRate</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"63\" y=\"-9\"><title name=\"NAME\">hits</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"64\" y=\"28\"><title name=\"NAME\">misses</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"global_declaration\" inline=\"false\" x=\"62\" y=\"72\"><title name=\"NAME\">hitRate</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"62\" y=\"118\"><mutation></mutation><title name=\"NAME\">calculateHitRate</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global hitRate</title><value name=\"VALUE\"><block type=\"math_division\" inline=\"true\"><value name=\"A\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global hits</title></block></value><value name=\"B\"><block type=\"math_add\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global hits</title></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\"><title name=\"VAR\">global misses</title></block></value></block></value></block></value></block></statement></block></xml>"},

"quiz_reset_score" :{"Name":"quiz_reset_score","DisplayName":"Procedures: Define resetScore() to Set Score to 100","Description":"Given a global variable, score, define a procedure, resetScore() that sets the global to 100.","QuestionHTML":"Define a procedure named <font color=\"red\">resetScore</font> that sets the global variable <font color=\"red\">score</font> to 100.\n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["The procedure definition block is in the Procedures drawer.","You will need to use a <i>Setter</i> block in the Variables drawer.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"resetScore()","FunctionDef":"var global_score;\n\nfunction resetScore() {\n  global_score = 100;\n}\n\nglobal_score = 0;\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"74\" y=\"6\"><title name=\"NAME\">score</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></xml>","Xmlsolution":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"74\" y=\"6\"><title name=\"NAME\">score</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block><block type=\"procedures_defnoreturn\" x=\"75\" y=\"51\"><mutation></mutation><title name=\"NAME\">score</title><statement name=\"STACK\"><block type=\"lexical_variable_set\" inline=\"false\"><title name=\"VAR\">global score</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></statement></block></xml>"},

"quiz_reset_all_globals" :{"Name":"quiz_reset_all_globals","DisplayName":"Procedures: Reset All Globals","Description":"Reset all global variables.","QuestionHTML":"Define a procedure named <i>resetAll</i> that takes no parameters and that resets all global variables to 0. \n ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to-procedure</i> block in the Procedures drawer. Use the first one.","Don't forget to rename the procedure.", "You'll need one or more <i>setter</i> blocks from the Variables drawer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"resetAll()","FunctionDef":"var A;\nvar B;\nvar C;\nvar global_B;\nvar global_A;\nvar global_C;\n\nfunction resetAll() {\n global_B = 0;\n global_A = 0;\n global_C = 0;\n}\n\n\nglobal_A = 100;\n\nglobal_B = 50;\n\nglobal_C = 5025;\n","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"143\" y=\"6\"><field name=\"NAME\">A</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"144\" y=\"38\"><field name=\"NAME\">B</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">50</field></block></value></block><block type=\"global_declaration\" id=\"79\" inline=\"false\" x=\"143\" y=\"70\"><field name=\"NAME\">C</field><value name=\"VALUE\"><block type=\"math_number\" id=\"80\"><field name=\"NUM\">5025</field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"75\" inline=\"false\" x=\"143\" y=\"6\"><field name=\"NAME\">A</field><value name=\"VALUE\"><block type=\"math_number\" id=\"76\"><field name=\"NUM\">100</field></block></value></block><block type=\"global_declaration\" id=\"77\" inline=\"false\" x=\"144\" y=\"38\"><field name=\"NAME\">B</field><value name=\"VALUE\"><block type=\"math_number\" id=\"78\"><field name=\"NUM\">50</field></block></value></block><block type=\"global_declaration\" id=\"79\" inline=\"false\" x=\"143\" y=\"70\"><field name=\"NAME\">C</field><value name=\"VALUE\"><block type=\"math_number\" id=\"80\"><field name=\"NUM\">5025</field></block></value></block><block type=\"procedures_defnoreturn\" id=\"83\" x=\"142\" y=\"116\"><mutation></mutation><field name=\"NAME\">resetAll</field><statement name=\"STACK\"><block type=\"lexical_variable_set\" id=\"89\" inline=\"false\"><field name=\"VAR\">global B</field><value name=\"VALUE\"><block type=\"math_number\" id=\"90\"><field name=\"NUM\">0</field></block></value><next><block type=\"lexical_variable_set\" id=\"91\" inline=\"false\"><field name=\"VAR\">global A</field><value name=\"VALUE\"><block type=\"math_number\" id=\"92\"><field name=\"NUM\">0</field></block></value><next><block type=\"lexical_variable_set\" id=\"93\" inline=\"false\"><field name=\"VAR\">global C</field><value name=\"VALUE\"><block type=\"math_number\" id=\"94\"><field name=\"NUM\">0</field></block></value></block></next></block></next></block></statement></block></xml>"},

"quiz_convert_list_to_string" :{"Name":"quiz_convert_list_to_string","DisplayName":"Procedures: convertListToString(L)","Description":"Define a procedure that converts a list to a string","QuestionHTML":"Suppose we have an app that needs to convert a list of words, such as [\"hello\", \"today\", \"is\", \"Sunday\"] into a single string -- i.e., \"hellotodayisSunday\". Write a procedure named <i>convertListToString</i> that takes a list as a parameter and sets the global variable <i>text</i> to the string containing those words. ","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to procedure</i> block from the Procedures drawer. You'll want the first one. ","You'll need a loop for this problem -- i.e., a <i>for each item in list</i> loop -- in the Controls drawer.","Don't forget the initialize your variables inside the procedure."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","text","text_join","text_join_item","text_length","text_isEmpty","text_trim","text_changeCase","text_compare","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"convertListToString(list)","FunctionDef":"var text;\nvar L;\nvar global_text;\nvar word;\n\nfunction convertListToString(L) {\n global_text = '';\n for (var word_index in L) {\n word = L[word_index];\n global_text = [global_text,word,' '].join('');\n }\n}\n\n\nglobal_text = '';\n","FunctionInputs":"[\"hello\", \"today\", \"is\", \"Sunday\"]","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"207\" inline=\"false\" x=\"112\" y=\"-1\"><field name=\"NAME\">text</field><value name=\"VALUE\"><block type=\"text\" id=\"208\"><field name=\"TEXT\"></field></block></value></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"global_declaration\" id=\"209\" inline=\"false\" x=\"112\" y=\"-1\"><field name=\"NAME\">text</field><value name=\"VALUE\"><block type=\"text\" id=\"210\"><field name=\"TEXT\"></field></block></value></block><block type=\"procedures_defnoreturn\" id=\"211\" x=\"109\" y=\"48\"><mutation><arg name=\"L\"></arg></mutation><field name=\"NAME\">convertListToString</field><field name=\"VAR0\">L</field><statement name=\"STACK\"><block type=\"lexical_variable_set\" id=\"212\" inline=\"false\"><field name=\"VAR\">global text</field><value name=\"VALUE\"><block type=\"text\" id=\"213\"><field name=\"TEXT\"></field></block></value><next><block type=\"controls_forEach\" id=\"214\" inline=\"false\"><field name=\"VAR\">word</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"215\"><field name=\"VAR\">L</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"216\" inline=\"false\"><field name=\"VAR\">global text</field><value name=\"VALUE\"><block type=\"text_join\" id=\"217\" inline=\"false\"><mutation items=\"3\"></mutation><value name=\"ADD0\"><block type=\"lexical_variable_get\" id=\"218\"><field name=\"VAR\">global text</field></block></value><value name=\"ADD1\"><block type=\"lexical_variable_get\" id=\"219\"><field name=\"VAR\">word</field></block></value><value name=\"ADD2\"><block type=\"text\" id=\"220\"><field name=\"TEXT\"> </field></block></value></block></value></block></statement></block></next></block></statement></block></xml>"},

"quiz_hello_purr" :{"Name":"quiz_hello_purr","DisplayName":"Event Handler: When Button Click Vibrate","Description":"Add a Sound.Vibrate block to the Button.Click procedure.","QuestionHTML":"Update the blocks shown here so that when the button is clicked, the phone vibrates for 500 milliseconds (ms) after the sound is played.","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Look in the 'Sound' drawer for the Sound.Vibrate block.","You'll need a Number block from the Math drawer.","The open slot in the Sound.Vibrate block represents the duration of the vibration in milliseconds (thousandths of a second)."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container", "math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Sound1", "Sound"]],"VariableMappings":{},"FunctionName":"Button1Click()","FunctionDef":"","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Sound\" method_name=\"Play\" is_generic=\"false\" instance_name=\"Sound1\"></mutation><field name=\"COMPONENT_SELECTOR\">Sound1</field></block></statement></block></xml>","Xmlsolution":"<xml><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Sound\" method_name=\"Play\" is_generic=\"false\" instance_name=\"Sound1\"></mutation><field name=\"COMPONENT_SELECTOR\">Sound1</field><next><block type=\"component_method\" inline=\"false\"><mutation component_type=\"Sound\" method_name=\"Vibrate\" is_generic=\"false\" instance_name=\"Sound1\"></mutation><field name=\"COMPONENT_SELECTOR\">Sound1</field><value name=\"ARG0\"><block type=\"math_number\"><field name=\"NUM\">500</field></block></value></block></next></block></statement></block></xml>"},

"quiz_canvas_touched" :{"Name":"quiz_canvas_touched","DisplayName":"Event Handler: When Canvas Touched Set a Variable","Description":"Perform a procedure when the Canvas is touched.","QuestionHTML":"When the Canvas is touched, set the Canvas Height to the value of global variable <i>X</i>.","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a CanvasTouched event handler for this problem.", "The setter for Canvas Height is in the <i>Canvas</i> drawer."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Canvas1","Canvas"]],"VariableMappings":{},"FunctionName":"Canvas1Touched()","FunctionDef":"var global_X;\nglobal_X = 1;\nvar global_Canvas1Height;\nglobal_Canvas1Height = 0;\nfunction Canvas1Touched(){\n global_Canvas1Height = global_X;\n}\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"83\" y=\"4\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">400</title></block></value></block></xml>"},

"quiz_button_stop_player" :{"Name":"quiz_button_stop_player","DisplayName":"Event Handler: Button Stop Player","Description":"Button handler stops the player.","QuestionHTML":"Code the blocks necessary to stop the Player when Button1 is clicked. ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a Button.Click event handler",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[["Button1","Button"],["Player1","Player"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" id=\"83\" x=\"116\" y=\"30\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\" id=\"91\"><mutation component_type=\"Player\" method_name=\"Stop\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement></block></xml>"},

"quiz_canvas_touched_novar" :{"Name":"quiz_canvas_touched_novar","DisplayName":"Event Handler: When Canvas Touched Set a Property","Description":"Call a procedure when the Canvas is touched.","QuestionHTML":"Put together the blocks needed so that when the Canvas is touched, the Canvas's Height will be set to 400.","AnswerHTML":"","AnswerType":"proc_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a CanvasTouched event handler for this problem.", "The setter for Canvas Height is in the <i>Canvas</i> drawer.","Use the drop down menu on the Setter block to find the <i>Height</i> property."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Canvas1","Canvas"]],"VariableMappings":{},"FunctionName":"Canvas1Touched()","FunctionDef":"\nvar global_Canvas1Height;\nglobal_Canvas1Height = 0;\nfunction Canvas1Touched(){\n global_Canvas1Height = 400;\n}\n","FunctionInputs":"undefined","XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"global_declaration\" inline=\"false\" x=\"83\" y=\"4\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">400</title></block></value></block></xml>"},

 "quiz_increment_variable" :   {
  "Name" : "quiz_increment_variable", 
  "DisplayName" : "Event Handler: When Button Clicked Increment Variable", 
  "ProblemType" : "variable_increment",
  "Description" : "Ask the user to code a variable increment operation when a Button is clicked.",
  "QuestionHTML" : "Complete the block so that it adds 1 to the variable 'X' when Button1 is clicked.",
  "AnswerHTML" : "",
  "AnswerType" : "proc_def",
  "AnswerVisibility" : "hidden",
  "ResultHTML" : "",
  "Hints" : ["Blocks for setting and getting variable values are in the 'Variables' drawer.", "You'll need to do an addition operation.", "Pseudocode: Set X to (get X) + 1"],
  "BuiltIns" : ["mutator_container", "math_mutator_item", "math_number", "math_compare", "math_add", "math_subtract", "math_division", "math_multiply", "math_power",
	       "global_declaration", "lexical_variable_get", "lexical_variable_set"],
  "Components" : [["Button1","Button"]],
  "FunctionName":"Button1Click()",
  "FunctionDef":"var global_X = 0;\nfunction Button1Click(){\n global_X = global_X + 1;\n}\n",
  "XmlDictionary":{},
  "Xmlgenerator" : "undefined",
  "Xmltemplate" : "<xml><block type=\"component_event\" x=\"85\" y=\"100\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation></block><block type=\"global_declaration\" inline=\"false\"  x=\"85\" y=\"50\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></xml>",
  "Xmlsolution" : ""},


 "quiz_increment_variable_by_Y" :   {
  "Name" : "quiz_increment_variable_by_Y", 
  "DisplayName" : "Event Handler: When Button Clicked Increment Variable By Y", 
  "ProblemType" : "variable_increment",
  "Description" : "Ask the user to code a variable increment operation when a Button is clicked.",
  "QuestionHTML" : "Put together all blocks necessary to add the value of <i>Y</i> to the variable <i>X</i>  when Button1 is clicked.",
  "AnswerHTML" : "",
  "AnswerType" : "proc_def",
  "AnswerVisibility" : "hidden",
  "ResultHTML" : "",
  "Hints" : ["Blocks for setting and getting variable values are in the 'Variables' drawer.", "You'll need to do an addition operation.", "Pseudocode: Set X to (get X) + (get Y)"],
  "BuiltIns" : ["mutator_container", "math_mutator_item", "math_number", "math_compare", "math_add", "math_subtract", "math_division", "math_multiply", "math_power",
	       "global_declaration", "lexical_variable_get", "lexical_variable_set"],
  "Components" : [["Button1","Button"]],
  "FunctionName":"Button1Click()",
  "FunctionDef":"var global_X = 0;\nvar global_Y = 0\nfunction Button1Click(){\n global_X = global_X + global_Y;\n}\n",
  "XmlDictionary":{},
  "Xmlgenerator" : "undefined",
  "Xmltemplate" : "<xml><block type=\"global_declaration\" inline=\"false\"  x=\"85\" y=\"20\"><title name=\"NAME\">Y</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value></block><block type=\"global_declaration\" inline=\"false\"  x=\"85\" y=\"50\"><title name=\"NAME\">X</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></xml>",
  "Xmlsolution" : ""},


"quiz_pause_the_player" :{"Name":"quiz_pause_the_player","DisplayName":"Event Handler: Pause the Player","Description":"Pause the Player component when the button is clicked","QuestionHTML":"Complete the <i>Button1.Click</i> event handler so that it will <i><b>pause</b></i> the <i>Player</i> when the button is clicked.","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the appropriate purple block from the <i>Player</i> drawer."],"BuiltIns":["controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Player1","Player"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field></block></xml>","Xmlsolution":"<xml><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Pause\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement></block></xml>"},

"quiz_button_click_stop_player" :{"Name":"quiz_button_click_stop_player","DisplayName":"Event Handler: Button Click Stop Player","Description":"Stop the Player when the button is clicked.","QuestionHTML":"Put together all the blocks necessary to handle a button click event on <i>Button1</i>. When <i>Button1</i> is clicked, the app should <i><b>stop</b></i> the <i>Player</i> component.\n ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>Button.Click</i> event handler in the <i>Button</i> drawer.","You'll need an appropriate purple block from the <i>Player</i> drawer. "],"BuiltIns":["controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Player1","Player"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Player\" method_name=\"Stop\" is_generic=\"false\" instance_name=\"Player1\"></mutation><field name=\"COMPONENT_SELECTOR\">Player1</field></block></statement></block></xml>"},

"quiz_pause_the_sound": {"Name":"quiz_pause_the_sound","DisplayName":"Event Handler: Pause the sound","Description":"Pause the sound when a button is clicked.","QuestionHTML":"Complete the <i>Button.Click</i> event handler so that it will <i><b>pause</b></i> the <i>Sound</i> component when it is clicked.\n","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["The <i>Sound</i> component is similar to the </i>Player</i> component.","Look for an appropriate <font color=\"purple\">purple block</font> in the <i>Sound</i> drawer."],"BuiltIns":["controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Sound1","Sound"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field></block></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Sound\" method_name=\"Pause\" is_generic=\"false\" instance_name=\"Sound1\"></mutation><field name=\"COMPONENT_SELECTOR\">Sound1</field></block></statement></block></xml>"},

"quiz_button_click_stop_sound" :{"Name":"quiz_button_click_stop_sound","DisplayName":"Event Handler: Button Click Stop Sound","Description":"A button click event handler that stops the sound component.","QuestionHTML":"Put together all the blocks necessary to handle a button click event on <i>Button1</i>. When <i>Button1</i> is clicked, the app should <i><b>stop</b></i> the <i>Sound</i> component.\n ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["The <i>Sound</i> component is similar to the <i>Player</i> component.","You'll need the <i>Button.Click</i> event handler in the <i>Button</i> drawer.","You'll need an appropriate purple block from the <i>Sound</i> drawer. "],"BuiltIns":["mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"],["Sound1","Sound"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"124\" y=\"6\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_method\"><mutation component_type=\"Sound\" method_name=\"Stop\" is_generic=\"false\" instance_name=\"Sound1\"></mutation><field name=\"COMPONENT_SELECTOR\">Sound1</field></block></statement></block></xml>"},

"quiz_button_click_disable_button" :{"Name":"quiz_button_click_disable_button","DisplayName":"Event Handler: Button Click Disable Button","Description":"A button click event handler that disables itself.","QuestionHTML":"Put together all the blocks necessary to handle a button click event on <i>Button1</i>. When <i>Button1</i> is clicked, the app should <i><b>disable</b></i>  <i>Button1</i>.\n ","AnswerHTML":"","AnswerType":"xml_blocks","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>Button.Click</i> event handler in the <i>Button</i> drawer.","You'll need the green property setter block from <i>Button</i> drawer.", "Use the drop-down menu on the setter block to choose the <i>Enabled</i> property.", "There is no <i>Disabled</i> property.  So 'disabled' means that Enabled is false. Check the Logic drawer for the value <i>false</i>."],"BuiltIns":["logic_boolean", "logic_compare", "logic_false", "logic_negate", "logic_operation", "logic_or", "mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[["Button1","Button"]],"VariableMappings":{},"FunctionName":"","FunctionDef":"undefined","FunctionInputs":"undefined","XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"component_event\" x=\"60\" y=\"41\"><mutation component_type=\"Button\" instance_name=\"Button1\" event_name=\"Click\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><statement name=\"DO\"><block type=\"component_set_get\" inline=\"false\"><mutation component_type=\"Button\" set_or_get=\"set\" property_name=\"Enabled\" is_generic=\"false\" instance_name=\"Button1\"></mutation><field name=\"COMPONENT_SELECTOR\">Button1</field><field name=\"PROP\">Enabled</field><value name=\"VALUE\"><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></xml>"},

"quiz_trivial_function" :{"Name":"quiz_trivial_function","DisplayName":"Functions: f()=0","Description":"Trivial function definition.","QuestionHTML":"Define f() = 0. That is, define a function named <i>f</i> that takes no parameters and returns 0.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["This is a hint","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames", "global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer"],"Components":[],"VariableMappings":{},"FunctionName":"f()","FunctionDef":"function f() {\n return 0;\n}","FunctionInputs":["0","0","0"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"procedures_defreturn\" inline=\"false\" x=\"102\" y=\"4\"><mutation></mutation><title name=\"NAME\">procedure</title></block></xml>","Xmlsolution":""},

"quiz_null_function" :{"Name":"quiz_null_function","DisplayName":"Functions: f(x)=0","Description":"Trivial function definition.","QuestionHTML":"Define f(x) = 0. That is, define a function named <i>f</i> that takes 1 parameter and returns 0.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["This is a hint","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames", "global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer"],"Components":[],"VariableMappings":{},"FunctionName":"f()","FunctionDef":"function f(x) {\n return 0;\n}","FunctionInputs":["1","2","3"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_hello_function" :{"Name":"quiz_hello_function","DisplayName":"Functions: The Hello Function","Description":"Write a function that performs a concatenation.","QuestionHTML":"Define a function named hello(x) that concatenates the word 'hello' and the parameter x, with a space in between. For example <i>hello(\"world\")</i> would result in \"hello world\".\n ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure-with-return</i> block in the Procedures drawer. It's the second block.","Use the mutator (the blue widget) to add a <b>parameter</b> to the definition.", "You'll probably want to use the <b>join</b> block in the Text drawer.","Construct the appropriate calculation and put it in the <b>result</b> slot."],"BuiltIns":["text","text_join","text_join_item", "text_length","text_isEmpty","text_trim","text_changeCase","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"hello(x)","FunctionDef":"function hello(x) {\n return \"hello \" + x;\n}","FunctionInputs":["\"joe\"","\"mary\""],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"70\" inline=\"false\" x=\"128\" y=\"28\"><mutation><arg name=\"x\"></arg></mutation><field name=\"NAME\">hello</field><field name=\"VAR0\">x</field><value name=\"RETURN\"><block type=\"text_join\" id=\"80\" inline=\"false\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><block type=\"text\" id=\"87\"><field name=\"TEXT\">hello </field></block></value><value name=\"ADD1\"><block type=\"lexical_variable_get\" id=\"90\"><field name=\"VAR\">x</field></block></value></block></value></block></xml>"},

"quiz_double_function" :{"Name":"quiz_double_function","DisplayName":"Functions: double(x)","Description":"A doubling function","QuestionHTML":"Write a function, double(x), that doubles the value of its single argument. ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to-procedure-return</i> block in the Procedures drawer.", "Place an expression that doubles the value of the parameter into the <i>return</i> slot."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence"],"Components":[],"VariableMappings":{},"FunctionName":"double(num)","FunctionDef":"function double(x) {\n return x * 2;\n}","FunctionInputs":["1","2","3","0"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_function_square" :{"Name":"quiz_function_square","DisplayName":"Functions: square(x)","Description":"Simple Function Definition","QuestionHTML":"Define a function named square(x) that has one parameter, x, and calculates the square of x.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure-with-return block</i> in the Procedures drawer. It's the second block.","Use the mutator (the blue widget) to add a <b>parameter</b> to the definition.", "You'll need the multiplication operator from the Math drawer.","Construct the appropriate calculation and put it in the <b>result</b> slot."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","text", "text_compare","text_contains","text_isEmpty","text_join","text_join_item","text_length","text_replace_all","text_segment","text_split","text_split_at_spaces","text_trim","text_starts_at","wrapSentence","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"square(num)","FunctionDef":"function square(x) {\n  return x * x;\n}","FunctionInputs":["0","1","2","10"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_is_odd" :{"Name":"quiz_is_odd","DisplayName":"Functions: isOdd(x)","Description":"A function definition problem.","QuestionHTML":"Write a function <font color=\"red\">isOdd(x)</font> that returns true if its parameter, <i>x</i>, is an odd number. You may assume that <i>x &ge; 0</i>.  You do not need <i>if/else</i> for this problem.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to-procedure-result</i> block in the Procedures drawer.","You'll need the <i>modulo of</i> block in the Math drawer.", "You can put the <i>is-odd</i> expression right into the <i>result</i> slot.","In pseudocode, isOdd(x):  (x mod 2) = 1"],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"isOdd(num)","FunctionDef":"function isOdd(x) {\n  return x % 2 != 0;\n}","FunctionInputs":["0","1","2","3","4","5","6","7","8","9"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_is_even" :{"Name":"quiz_is_even","DisplayName":"Functions: isEven(x)","Description":"Define the isEven(x) function. ","QuestionHTML":"Define a function named <i>isEven(x)</i> that takes a single parameter. If its parameter is even, the function should return true. Otherwise it should return false. \n ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need an <i>to procedure</i> block from the Procedures drawer. Choose the second one. ","You can use an if/else algorithm for this problem.","A number is even if it has a remainder of 0 when it is divided by 2. ","The function should return either true or false. "],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","logic_boolean","logic_compare","logic_false","logic_negate","logic_operation","logic_or","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"isEven(num)","FunctionDef":"function isEven(x) {\n return function() {\n if (x % 2 == 0) {\n return true; \n } else {\n return false; \n }\n }();\n}","FunctionInputs":["0","1","2","3","4","5"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"72\" inline=\"false\" x=\"118\" y=\"77\"><mutation><arg name=\"x\"></arg></mutation><field name=\"NAME\">isEven</field><field name=\"VAR0\">x</field><value name=\"RETURN\"><block type=\"controls_choose\" id=\"81\" inline=\"false\"><value name=\"TEST\"><block type=\"math_compare\" id=\"96\" inline=\"true\"><field name=\"OP\">EQ</field><value name=\"A\"><block type=\"math_divide\" id=\"112\" inline=\"true\"><field name=\"OP\">MODULO</field><value name=\"DIVIDEND\"><block type=\"lexical_variable_get\" id=\"116\"><field name=\"VAR\">x</field></block></value><value name=\"DIVISOR\"><block type=\"math_number\" id=\"113\"><field name=\"NUM\">2</field></block></value></block></value><value name=\"B\"><block type=\"math_number\" id=\"97\"><field name=\"NUM\">0</field></block></value></block></value><value name=\"THENRETURN\"><block type=\"logic_boolean\" id=\"123\"><field name=\"BOOL\">TRUE</field></block></value><value name=\"ELSERETURN\"><block type=\"logic_boolean\" id=\"124\"><field name=\"BOOL\">FALSE</field></block></value></block></value></block></xml>"},

"quiz_is_divisible_by" :{"Name":"quiz_is_divisible_by","DisplayName":"Functions: isDivisibleBy(x,y)","Description":"Describe the quiz problem.","QuestionHTML":"Define a function 'isDivisibleBy(x,y)' that returns true if <i>x</i> is evenly divisible by <i>y</i>. Otherwise it returns false.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to-procedure-result</i> block in the Procedures drawer.","You'll need the <i>modulo of</i> block in the Math drawer.","Put an expression that computes x is divisible by y right into the <i>result</i> slot.","In pseudocode, isDivisibleBy(x,y):  (x mod y) = 0"],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"isDivisibleBy(num,num)","FunctionDef":"function isDivisibleBy(x, y) {\n  return x % y == 0;\n}","FunctionInputs":["4,2","4,1","4,3","15,2","17,3","0,2"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_simple_function": {"Name":"quiz_simple_function","DisplayName":"Functions: sum(low,high)","Description":"Describe the quiz problem.","QuestionHTML":"Write a function, h(x,y), that returns the sum of the numbers from x to y inclusive.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Hint #1.","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"h(num,num)","FunctionDef":"function h(x, y) {\n  return function(sum,i) {\n    return function() {\n    while (i <= y) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return sum;\n  }();\n  }(0,x);\n}","FunctionInputs":["0,0","1,10","1,20"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_pounds_to_kilograms" :{"Name":"quiz_pounds_to_kilograms","DisplayName":"Functions: lbsToKgs(x)","Description":"Describe the quiz problem.","QuestionHTML":"Write a function <font color=\"red\">lbsToKg(x)</font> that converts pounds to kg.  I kg = 2.2 pounds.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure-with-return</i> block in the Procedures drawer. It's the second block.","Use the mutator (the blue widget) to add a <b>parameter</b> to the definition.", "You'll probably want to use the division operator from the Math drawer.","Construct the appropriate calculation and put it in the <b>result</b> slot."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"lbsToKg(num)","FunctionDef":"function lbsToKg(x) {\n  return x / 2.2;\n}","FunctionInputs":["1","2.2","0"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>","Xmlsolution":""},

"quiz_quarts_to_gallons" :{"Name":"quiz_quarts_to_gallons","DisplayName":"Functions: quartsToGallons(x)","Description":"Describe the quiz problem.","QuestionHTML":"Define a function 'quartsToGallons(x)', with one parameter representing amount in quarts, that returns the amount in gallons, where 1 gal. = 4 qts.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Hint #1.","Hint #2.","Hint #3."],"BuiltIns":["mutator_container", "math_mutator_item", "math_add","math_compare","math_divide","math_division","math_number","math_multiply","math_power","math_subtract","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"quartsToGallons(num)","FunctionDef":"function quartsToGallons(q) {\n  return q / 4;\n}","FunctionInputs":["0","4","6","8"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_cups_to_tablespoons" :{"Name":"quiz_cups_to_tablespoons","DisplayName":"Functions: cupsToTablespoons(x)","Description":"Describe the quiz problem.","QuestionHTML":"Write a function cupsToTablespoons that converts cups to tbsp using 1 cup = 16 tbsps.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Hint #1.","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"cupsToTablespoons(num)","FunctionDef":"function cupsToTablespoons(x) {\n  return x * 16;\n}","FunctionInputs":["0","1","2","4"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_hypotenuse" :{"Name":"quiz_hypotenuse","DisplayName":"Functions: hypotenuse(a,b)","Description":"Function Definition.","QuestionHTML":"Define a function named <i>hypotenuse(a,b)</i> that calculates the length of the hypotenuse of a right triangle given the lengths of its other two sides, <i>a</i> and <i>b</i>.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to-procedure-return</i> block from the Procedures drawer","The calculation for the hypotenuse can go right in the <i>return</i> slot.","In pseudocode, hypotenuse = sqrt(a^2 + b^2)."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"hypotenuse(num,num)","FunctionDef":"function hypotenuse(a, b) {\n  return Math.sqrt(a * a + b * b);\n}","FunctionInputs":["3,4"," 5,12"," 6,7"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_sqrt_of_average" :{"Name":"quiz_sqrt_of_average","DisplayName":"Functions: sqrtOfAverage(x,y)","Description":"Describe the quiz problem.","QuestionHTML":"Define a function named <i>sqrtOfAverage(x,y)</i> that takes the squareroot of the average of its 2 arguments, <i>x</i> and <i>y</i>.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Hint #1.","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","mutator_container", "math_mutator_item", "math_number","math_multiply","math_power","math_subtract","math_single","lexical_variable_get","lexical_variable_set","global_declaration","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"sqrtOfAverage(num,num)","FunctionDef":"function sqrtOfAverage(x, y) {\n  return Math.sqrt((x + y) / 2);\n}","FunctionInputs":["0,10","10,20","0,0","12345,98765"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":""},

"quiz_function_cube" :{"Name":"quiz_function_cube","DisplayName":"Functions: cube(x)","Description":"Define cube(x).","QuestionHTML":"Define the function, cube(x), which returns the cube of its parameter. ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a function definition block in the Procedures. ",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"cube(x)","FunctionDef":"function cube(x) {\n return x * x * x;\n}","FunctionInputs":["0","1","2","3","4"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"72\" inline=\"false\" x=\"107\" y=\"24\"><mutation><arg name=\"x\"></arg></mutation><field name=\"NAME\">cube</field><field name=\"VAR0\">x</field><value name=\"RETURN\"><block type=\"math_multiply\" id=\"90\" inline=\"true\"><mutation items=\"3\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"93\"><field name=\"VAR\">x</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"96\"><field name=\"VAR\">x</field></block></value><value name=\"NUM2\"><block type=\"lexical_variable_get\" id=\"104\"><field name=\"VAR\">x</field></block></value></block></value></block></xml>"},

"quiz_comma-delimited_lat_long" :{"Name":"quiz_comma-delimited_lat_long","DisplayName":"Functions: Comma-delimited Lat Long","Description":"A function to generate a comma-delimited lat long string","QuestionHTML":"Define a function named <i><b>makeLatLongString(lat,long)</b></i> that takes two parameters, a <i><b>lat</b></i> and a <i><b>long</b></i>, and produces a comma-delimited string 'lat,long'. ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need the <i>to procedure-with-return</i> block in the Procedures drawer. It's the second block.","Use the mutator (the blue widget) to add two <b>parameters</b> to the definition. You can name them whatever you like.", "You'll probably want to use the <b>join</b> block in the Text drawer to perform concatenation.","Construct the appropriate calculation and put it in the <b>result</b> slot."],"BuiltIns":["text","text_join","text_join_item","text_length","text_isEmpty","text_trim","text_changeCase","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"makeLatLongString(lat, long)","FunctionDef":"function makeLatLongString(lat, long) {\n return [lat,',',long].join('');\n}","FunctionInputs":["42.1,-72.2"," 37.9,45.2"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"78\" inline=\"false\" x=\"66\" y=\"93\"><mutation><arg name=\"lat\"></arg><arg name=\"long\"></arg></mutation><field name=\"NAME\">makeLatLongString</field><field name=\"VAR0\">lat</field><field name=\"VAR1\">long</field><value name=\"RETURN\"><block type=\"text_join\" id=\"75\" inline=\"false\"><mutation items=\"3\"></mutation><value name=\"ADD0\"><block type=\"lexical_variable_get\" id=\"90\"><field name=\"VAR\">lat</field></block></value><value name=\"ADD1\"><block type=\"text\" id=\"100\"><field name=\"TEXT\">,</field></block></value><value name=\"ADD2\"><block type=\"lexical_variable_get\" id=\"93\"><field name=\"VAR\">long</field></block></value></block></value></block></xml>"},

"quiz_sumList" :{"Name":"quiz_sumList","DisplayName":"Functions: sumList(L)","Description":"Function to sum a list","QuestionHTML":"Define a function <b>sumList()</b> that computes the sum of its list parameter. ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a loop from the Controls drawer.",""],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"sumList(list)","FunctionDef":"function sumList(aList) {\n return function(sum) {\n return function() {\n for (var item_index in aList) {\n item = aList[item_index];\n sum = sum + item;\n }\n return sum;\n }();\n }(0);\n}","FunctionInputs":["[]","[1,2,3.4]"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"123\" inline=\"false\" x=\"40\" y=\"16\"><mutation><arg name=\"aList\"></arg></mutation><field name=\"NAME\">sumList</field><field name=\"VAR0\">aList</field><value name=\"RETURN\"><block type=\"local_declaration_expression\" id=\"132\" inline=\"false\"><mutation><localname name=\"sum\"></localname></mutation><field name=\"VAR0\">sum</field><value name=\"DECL0\"><block type=\"math_number\" id=\"135\"><field name=\"NUM\">0</field></block></value><value name=\"RETURN\"><block type=\"controls_do_then_return\" id=\"141\" inline=\"false\"><statement name=\"STM\"><block type=\"controls_forEach\" id=\"147\" inline=\"false\"><field name=\"VAR\">item</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"150\"><field name=\"VAR\">aList</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"156\" inline=\"false\"><field name=\"VAR\">sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"157\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"160\"><field name=\"VAR\">sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"163\"><field name=\"VAR\">item</field></block></value></block></value></block></statement></block></statement><value name=\"VALUE\"><block type=\"lexical_variable_get\" id=\"168\"><field name=\"VAR\">sum</field></block></value></block></value></block></value></block></xml>"},

"quiz_is_in_list" :{"Name":"quiz_is_in_list","DisplayName":"Functions: isInList(L, n)","Description":"Define the isInList(list, num) function. ","QuestionHTML":"Define a function named <i>isInList</i> that takes two parameters, a list and a number. The function should return true if the number is in the list and otherwise it should return false. For example, isInList([1,2,3],3) would return true. \n ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to procedure</i> block in the Procedures drawer.  You'll want the second one to return a value.", "You'll need a <i>for-item-in-list</i> loop for this problem.", "To use a <i>for block</i> in a function, you'll have to put it inside a <i>do-result</i> block in the Controls drawer.", "You probably need a local <i>flag</i> variable to keep track of whether the list contains the number."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","logic_boolean","logic_compare","logic_false","logic_negate","logic_operation","logic_or","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"isInList(list,num)","FunctionDef":"function isInList(L, n) {\n return function(flag) {\n return function() {\n for (var item_index in L) {\n item = L[item_index];\n if (item == n) {\n flag = true;\n }\n }\n return flag;\n }();\n }(false);\n}","FunctionInputs":["[],1"," [1,2,3],3","[1,2,3],4","[1,2,3],2"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"72\" inline=\"false\" x=\"187\" y=\"48\"><mutation><arg name=\"L\"></arg><arg name=\"n\"></arg></mutation><field name=\"NAME\">isInList</field><field name=\"VAR0\">L</field><field name=\"VAR1\">n</field><value name=\"RETURN\"><block type=\"local_declaration_expression\" id=\"84\" inline=\"false\"><mutation><localname name=\"flag\"></localname></mutation><field name=\"VAR0\">flag</field><value name=\"DECL0\"><block type=\"logic_boolean\" id=\"89\"><field name=\"BOOL\">FALSE</field></block></value><value name=\"RETURN\"><block type=\"controls_do_then_return\" id=\"95\" inline=\"false\"><statement name=\"STM\"><block type=\"controls_forEach\" id=\"101\" inline=\"false\"><field name=\"VAR\">item</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"104\"><field name=\"VAR\">L</field></block></value><statement name=\"DO\"><block type=\"controls_if\" id=\"110\" inline=\"false\"><value name=\"IF0\"><block type=\"math_compare\" id=\"128\" inline=\"true\"><field name=\"OP\">EQ</field><value name=\"A\"><block type=\"lexical_variable_get\" id=\"113\"><field name=\"VAR\">item</field></block></value><value name=\"B\"><block type=\"lexical_variable_get\" id=\"131\"><field name=\"VAR\">n</field></block></value></block></value><statement name=\"DO0\"><block type=\"lexical_variable_set\" id=\"134\" inline=\"false\"><field name=\"VAR\">flag</field><value name=\"VALUE\"><block type=\"logic_boolean\" id=\"135\"><field name=\"BOOL\">TRUE</field></block></value></block></statement></block></statement></block></statement><value name=\"VALUE\"><block type=\"lexical_variable_get\" id=\"138\"><field name=\"VAR\">flag</field></block></value></block></value></block></value></block></xml>"},


"quiz_distance_from_origin" :{"Name":"quiz_distance_from_origin","DisplayName":"Functions: distanceFromOrigin(a,b)","Description":"Define distanceFromOrigin(a,b).","QuestionHTML":"Suppose you have an app that needs to calculate a sprite's distance from the origin, (0,0). Define a function, <i>distanceFromOrigin</i>, that takes 2 parameters, the sprite's x and y coordinates, and returns its distance from the origin, where d= sqrt(x^2 + y^2).\n ","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to procedure</i> block in the Procedures drawer. Use the second one to return a result. ","Use the blocks in the Math drawer to build the desired expression for calculating distance. "],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"distanceFromOrigin(num,num)","FunctionDef":"function distanceFromOrigin(x, y) {\n return Math.sqrt(x * x + y * y);\n}","FunctionInputs":["0,0"," 1,1"," 20,10","10,15"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"72\" inline=\"false\" x=\"30\" y=\"64\"><mutation><arg name=\"x\"></arg><arg name=\"y\"></arg></mutation><field name=\"NAME\">distanceFromOrigin</field><field name=\"VAR0\">x</field><field name=\"VAR1\">y</field><value name=\"RETURN\"><block type=\"math_single\" id=\"95\" inline=\"false\"><field name=\"OP\">ROOT</field><value name=\"NUM\"><block type=\"math_add\" id=\"115\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"math_multiply\" id=\"130\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"138\"><field name=\"VAR\">x</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"139\"><field name=\"VAR\">x</field></block></value></block></value><value name=\"NUM1\"><block type=\"math_multiply\" id=\"131\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"142\"><field name=\"VAR\">y</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"143\"><field name=\"VAR\">y</field></block></value></block></value></block></value></block></value></block></xml>"},

"quiz_average_a_list" :{"Name":"quiz_average_a_list","DisplayName":"Functions: avgAList(L)","Description":"Define avgAList(list).","QuestionHTML":"Define a function named <i>avgAList</i> that takes a single list parameter and returns the average of the numbers in the list. For example, <i>avgAList([20,60,40,40])</i> would return 40 as the average. You may assume that the list is not empty.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["You'll need a <i>to procedure</i> block in the Procedures drawer. Use the second one to return a result. ","This would be a good place to use a local variable for the <i>sum</i> of the numbers in the list. ","Use a <i>for each item</i> loop to iterate through the list elements. ","This is an example of a <i>running-total algorithm</i>. "],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","math_number","math_on_list","math_power","math_random_float","math_random_int","math_round","math_single","math_subtract","lists_create_with","lists_create_with_item","lists_is_empty","lists_length","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames","mutator_container","InstantInTime","YailTypeToBlocklyType","YailTypeToBlocklyTypeMap","setTooltip","wrapSentence","component_event","component_method","component_set_get","component_component_block"],"Components":[],"VariableMappings":{},"FunctionName":"avgAList(list)","FunctionDef":"function avgAList(L) {\n return function(sum) {\n return function() {\n for (var item_index in L) {\n item = L[item_index];\n sum = sum + item;\n }\n return sum / ''.length;\n }();\n }(0);\n}","FunctionInputs":["[1,2,3,4,5,6,7,8]", "[5]"],"XmlDictionary":{},"Xmlgenerator":"undefined","Xmltemplate":"<xml></xml>","Xmlsolution":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"procedures_defreturn\" id=\"141\" inline=\"false\" x=\"124\" y=\"61\"><mutation><arg name=\"L\"></arg></mutation><field name=\"NAME\">avgAList</field><field name=\"VAR0\">L</field><value name=\"RETURN\"><block type=\"local_declaration_expression\" id=\"142\" inline=\"false\"><mutation><localname name=\"sum\"></localname></mutation><field name=\"VAR0\">sum</field><value name=\"DECL0\"><block type=\"math_number\" id=\"143\"><field name=\"NUM\">0</field></block></value><value name=\"RETURN\"><block type=\"controls_do_then_return\" id=\"144\" inline=\"false\"><statement name=\"STM\"><block type=\"controls_forEach\" id=\"145\" inline=\"false\"><field name=\"VAR\">item</field><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"146\"><field name=\"VAR\">L</field></block></value><statement name=\"DO\"><block type=\"lexical_variable_set\" id=\"147\" inline=\"false\"><field name=\"VAR\">sum</field><value name=\"VALUE\"><block type=\"math_add\" id=\"148\" inline=\"true\"><mutation items=\"2\"></mutation><value name=\"NUM0\"><block type=\"lexical_variable_get\" id=\"149\"><field name=\"VAR\">sum</field></block></value><value name=\"NUM1\"><block type=\"lexical_variable_get\" id=\"150\"><field name=\"VAR\">item</field></block></value></block></value></block></statement></block></statement><value name=\"VALUE\"><block type=\"math_division\" id=\"151\" inline=\"true\"><value name=\"A\"><block type=\"lexical_variable_get\" id=\"152\"><field name=\"VAR\">sum</field></block></value><value name=\"B\"><block type=\"lists_length\" id=\"153\" inline=\"false\"><value name=\"LIST\"><block type=\"lexical_variable_get\" id=\"154\"><field name=\"VAR\">L</field></block></value></block></value></block></value></block></value></block></value></block></xml>"},


"quiz_recursive_sum": {"Name":"quiz_recursive_sum","DisplayName":"Functions: Recursive sum(n)","Description":"Recursive function definition","QuestionHTML":"Write a recursive function, sum(n), that computes the sum of 0..n.","AnswerHTML":"","AnswerType":"func_def","AnswerVisibility":"hidden","ResultHTML":"","Hints":["Hint #1.","Hint #2.","Hint #3."],"BuiltIns":["math_add","math_compare","math_divide","math_division","math_is_a_number","math_multiply","math_mutator_item","mutator_container","math_number","math_on_list","math_power","math_random_float","math_random_int","math_random_set_seed","math_round","math_single","math_subtract","logic_boolean","logic_compare","logic_false","logic_negate","logic_operation","logic_or","text","text_compare","text_contains","text_isEmpty","text_join","text_join_item","text_length","text_replace_all","text_segment","text_split","text_split_at_spaces","text_trim","wrapSentence","controls_choose","controls_do_then_return","controls_if","controls_if_else","controls_if_elseif","controls_if_if","controls_while","controls_forEach","controls_forRange","global_declaration","lexical_variable_get","lexical_variable_set","local_declaration_expression","local_declaration_statement","local_mutatorarg","local_mutatorcontainer","procedures_callnoreturn","procedures_callreturn","procedures_defnoreturn","procedures_defreturn","procedures_mutatorarg","procedures_mutatorcontainer","removeProcedureValues","getProcedureNames"],"Components":[],"VariableMappings":{},"FunctionName":"sum(num)","FunctionDef":"function sum(n) {\n  return function() {\n    if (n <= 0) {\n      return 0; \n    } else {\n      return n + sum(n - 1); \n    }\n  }();\n}","FunctionInputs":["0","1","5","10","100"],"XmlDictionary":"undefined","Xmlgenerator":"undefined","Xmltemplate":"<xml><block type=\"procedures_defreturn\" inline=\"false\" x=\"133\" y=\"31\"><mutation><arg name=\"n\"></arg></mutation><title name=\"NAME\">sum</title><value name=\"RETURN\"><block type=\"controls_choose\" inline=\"false\"></block></value></block></xml>","Xmlsolution":""}

}
  


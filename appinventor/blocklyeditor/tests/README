# Overview of blocks code generation unit tests

The unit tests for the blocks are written in Javascript
There are two kind of unit tests for block code generation.  There's a
simple one just checks the code generator for an individual block, and
a general test can check the code for an entire project.

For either test, you need to use PhantomJS:  phantomJS: http://phantomjs.org/download.html

To install PhantomJS in MacOSX run:

brew install phantomJS (if you are using homebew)

In other platforms just download the package and put the bin folder in your PATH

# Adding new tests to the ant build system

The ant target 'ant tests' will execute all Java tests for the
codebase.  To execute also JavaScript tests, they have to be added to
the file

.appinventor/blocklyeditor/tests/com/google/appinventor/blocklyeditor/BlocklyEvalTest.java

Th tests here are Java functions that use PhamtomJS to execute the Javascript test.   Here's
an example, where the paintPotTest.js file is a Javascrpt test.

    public void testPaintPot() throws Exception {

      String[] params = { "phantomjs", testpath + "/tests/com/google/appinventor/blocklyeditor/paintPotTest.js" };
      String result = "";

      try {
        result = CodeBlocksProcessHelper.exec(params, true).trim();
      } catch (IOException e) {
        e.printStackTrace();
      }

      assertEquals("true", result.toString());
    }


# Writing simple code generator tests.

To write simple test for the code generation of a single block, see
the example for the test for the lists_create_with block in

appinventor/blocklyeditor/tests/com/google/appinventor/generators_unit/test_lists_create_with.js

and use that as a template.  All you need need to do is
define four appropriate values (see test_lists_create_with.js).  Then
install the test in BlocklyCodeGeneratorTest.java



# Full project tests

These tests can be found at blocklyeditor/tests/com/google/appinventor/blocklyeditor

They take a set of blocks for a project and generate the yail for it. They then check this yail by
applying various tests. For example, checking whether this yail is the same as the yail generated
by the equivalent project in App Inventor 1.

To create a phantomJS test you will need to generate a project first, so that
you have access to an Screen1.scm and Screen1.bky files.

After that, create a new test following the template in this same folder called
./appinventor/blocklyeditor/tests/yailGeneratorTest.template

The test will expect the scm and bky files mentioned above as test
data, and also an expected yail file to test against, acquired from
App Inventor Classic.

*** Getting the .scm and .bky files:
- Create a new project in App Inventor 2
- When the project is complete, go to 'My Projects', select your project,
and click 'Download Source'
- You will receive a .aia file. This behaves as a .zip file. When unzipped,
navigate through the /src directory which will reveal the .scm and .bky files.
- Put these into a folder in the 'data' directory for the tests; for instance:
[...]/appinventor/blocklyeditor/data/paintPot
- If you are testing, for example, paintPot, name the folder 'paintPot', containing the .scm and .bky files.

*** Getting the Classic .yail: (Optional)
We have been testing some projects based on the YAIL generated by the same project using App
Inventor 1. This will not always be the case, but if that is what you need to do,
you can follow the steps:
- You will need to create the exact same project as in newblocks, but in App Inventor Classic.
- Once complete, you will need to follow similar steps as above to download the
source files, contained in a .zip folder.
- Navigating through the /src directory will reveal a .scm and .blk file. These
will be used to generate Yail.
- Acquire the YailGenerator.jar file, located appinventor/buildserver/build/
- Copy the YailGenerator.jar file to a directory that will be convenient,
preferably containing the .scm and .blk file.
- In Terminal, navigate to where you put your YailGenerator.jar file.
- Use the command:
    java -jar <PATH_TO_YailGenerator.jar> <PATH_TO_Screen1.scm> <PATH_TO_Screen1.blk> fakepackagename > <WHAT_YOU'RE_TESTING>Expected.yail

- If all three files are in the same directory, the command can be as simple as:
    java -jar YailGenerator.jar Screen1.scm Screen1.blk fakepackagename > paintPotExpected.yail
- Copy the XXXXExpected.yail into the folder along with the original .scm and .bky files.

*** Using the yailGeneratorTest template:
- Simply substitute the first three file paths to the corresponding .scm and .bky
files, as well as the expected.yail file.

For an example, see the code in moleMashTest.js, and the accompanying
files inside data/moleMash.



